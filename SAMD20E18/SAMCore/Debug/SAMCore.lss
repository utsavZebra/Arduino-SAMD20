
SAMCore.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000017b0  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000020  20000000  000017b0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000033c  20000020  000017d0  00020020  2**2
                  ALLOC
  3 .ARM.attributes 00000028  00000000  00000000  00020020  2**0
                  CONTENTS, READONLY
  4 .comment      00000059  00000000  00000000  00020048  2**0
                  CONTENTS, READONLY
  5 .debug_info   00039d4b  00000000  00000000  000200a1  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00004ebf  00000000  00000000  00059dec  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_loc    00004e5a  00000000  00000000  0005ecab  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_aranges 00000728  00000000  00000000  00063b05  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_ranges 00000b70  00000000  00000000  0006422d  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_macro  00023d04  00000000  00000000  00064d9d  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   0000b527  00000000  00000000  00088aa1  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    00085e08  00000000  00000000  00093fc8  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  00001114  00000000  00000000  00119dd0  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .stabstr      000001b9  00000000  00000000  0011aee4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	00 80 00 20 65 01 00 00 4d 01 00 00 4d 01 00 00     ... e...M...M...
	...
      2c:	4d 01 00 00 00 00 00 00 00 00 00 00 4d 01 00 00     M...........M...
      3c:	b9 01 00 00 4d 01 00 00 4d 01 00 00 4d 01 00 00     ....M...M...M...
      4c:	4d 01 00 00 4d 01 00 00 4d 01 00 00 4d 01 00 00     M...M...M...M...
      5c:	51 01 00 00 4d 01 00 00 b5 0e 00 00 4d 01 00 00     Q...M.......M...
      6c:	4d 01 00 00 dd 0e 00 00 4d 01 00 00 4d 01 00 00     M.......M...M...
      7c:	4d 01 00 00 4d 01 00 00 4d 01 00 00 4d 01 00 00     M...M...M...M...
      8c:	4d 01 00 00 00 00 00 00 4d 01 00 00 4d 01 00 00     M.......M...M...
      9c:	4d 01 00 00 4d 01 00 00                             M...M...

000000a4 <__do_global_dtors_aux>:
      a4:	b510      	push	{r4, lr}
      a6:	4c06      	ldr	r4, [pc, #24]	; (c0 <__do_global_dtors_aux+0x1c>)
      a8:	7823      	ldrb	r3, [r4, #0]
      aa:	2b00      	cmp	r3, #0
      ac:	d107      	bne.n	be <__do_global_dtors_aux+0x1a>
      ae:	4b05      	ldr	r3, [pc, #20]	; (c4 <__do_global_dtors_aux+0x20>)
      b0:	2b00      	cmp	r3, #0
      b2:	d002      	beq.n	ba <__do_global_dtors_aux+0x16>
      b4:	4804      	ldr	r0, [pc, #16]	; (c8 <__do_global_dtors_aux+0x24>)
      b6:	e000      	b.n	ba <__do_global_dtors_aux+0x16>
      b8:	bf00      	nop
      ba:	2301      	movs	r3, #1
      bc:	7023      	strb	r3, [r4, #0]
      be:	bd10      	pop	{r4, pc}
      c0:	20000020 	.word	0x20000020
      c4:	00000000 	.word	0x00000000
      c8:	000017ac 	.word	0x000017ac

000000cc <frame_dummy>:
      cc:	4b08      	ldr	r3, [pc, #32]	; (f0 <frame_dummy+0x24>)
      ce:	b510      	push	{r4, lr}
      d0:	2b00      	cmp	r3, #0
      d2:	d003      	beq.n	dc <frame_dummy+0x10>
      d4:	4907      	ldr	r1, [pc, #28]	; (f4 <frame_dummy+0x28>)
      d6:	4808      	ldr	r0, [pc, #32]	; (f8 <frame_dummy+0x2c>)
      d8:	e000      	b.n	dc <frame_dummy+0x10>
      da:	bf00      	nop
      dc:	4807      	ldr	r0, [pc, #28]	; (fc <frame_dummy+0x30>)
      de:	6803      	ldr	r3, [r0, #0]
      e0:	2b00      	cmp	r3, #0
      e2:	d100      	bne.n	e6 <frame_dummy+0x1a>
      e4:	bd10      	pop	{r4, pc}
      e6:	4b06      	ldr	r3, [pc, #24]	; (100 <frame_dummy+0x34>)
      e8:	2b00      	cmp	r3, #0
      ea:	d0fb      	beq.n	e4 <frame_dummy+0x18>
      ec:	4798      	blx	r3
      ee:	e7f9      	b.n	e4 <frame_dummy+0x18>
      f0:	00000000 	.word	0x00000000
      f4:	20000024 	.word	0x20000024
      f8:	000017ac 	.word	0x000017ac
      fc:	2000001c 	.word	0x2000001c
     100:	00000000 	.word	0x00000000

00000104 <loop>:
  SPI.begin();
  Wire.begin();

}

void loop() {
     104:	b510      	push	{r4, lr}
  // put your main code here, to run repeatedly:
  uint32_t time = millis();
     106:	f000 f85f 	bl	1c8 <millis>
  Serial.print(time);
     10a:	220a      	movs	r2, #10
  uint32_t time = millis();
     10c:	0001      	movs	r1, r0
  Serial.print(time);
     10e:	4804      	ldr	r0, [pc, #16]	; (120 <loop+0x1c>)
     110:	f000 f8e1 	bl	2d6 <_ZN5Print5printEmi>
  delay(500);
     114:	20fa      	movs	r0, #250	; 0xfa
     116:	0040      	lsls	r0, r0, #1
     118:	f000 f85c 	bl	1d4 <delay>
}
     11c:	bd10      	pop	{r4, pc}
     11e:	46c0      	nop			; (mov r8, r8)
     120:	20000290 	.word	0x20000290

00000124 <setup>:
  Serial.begin(9600);
     124:	2196      	movs	r1, #150	; 0x96
void setup() {
     126:	b510      	push	{r4, lr}
  Serial.begin(9600);
     128:	0189      	lsls	r1, r1, #6
     12a:	4805      	ldr	r0, [pc, #20]	; (140 <setup+0x1c>)
     12c:	f000 f9cc 	bl	4c8 <_ZN4Uart5beginEm>
  SPI.begin();
     130:	4804      	ldr	r0, [pc, #16]	; (144 <setup+0x20>)
     132:	f000 fd3b 	bl	bac <_ZN8SPIClass5beginEv>
  Wire.begin();
     136:	4804      	ldr	r0, [pc, #16]	; (148 <setup+0x24>)
     138:	f000 fdd8 	bl	cec <_ZN7TwoWire5beginEv>
}
     13c:	bd10      	pop	{r4, pc}
     13e:	46c0      	nop			; (mov r8, r8)
     140:	20000290 	.word	0x20000290
     144:	20000044 	.word	0x20000044
     148:	2000005c 	.word	0x2000005c

0000014c <Dummy_Handler>:

/* Default empty handler */
void Dummy_Handler(void)
{
#if defined DEBUG
  __BKPT(3);
     14c:	be03      	bkpt	0x0003
     14e:	e7fe      	b.n	14e <Dummy_Handler+0x2>

00000150 <USB_Handler>:

static void (*usb_isr)(void) = NULL;

void USB_Handler(void)
{
  if (usb_isr)
     150:	4b03      	ldr	r3, [pc, #12]	; (160 <USB_Handler+0x10>)
{
     152:	b510      	push	{r4, lr}
  if (usb_isr)
     154:	681b      	ldr	r3, [r3, #0]
     156:	2b00      	cmp	r3, #0
     158:	d000      	beq.n	15c <USB_Handler+0xc>
    usb_isr();
     15a:	4798      	blx	r3
}
     15c:	bd10      	pop	{r4, pc}
     15e:	46c0      	nop			; (mov r8, r8)
     160:	2000003c 	.word	0x2000003c

00000164 <Reset_Handler>:
{
     164:	b570      	push	{r4, r5, r6, lr}
  if ((&__data_start__ != &__data_end__) && (pSrc != pDest)) {
     166:	490f      	ldr	r1, [pc, #60]	; (1a4 <Reset_Handler+0x40>)
     168:	4c0f      	ldr	r4, [pc, #60]	; (1a8 <Reset_Handler+0x44>)
     16a:	42a1      	cmp	r1, r4
     16c:	d104      	bne.n	178 <Reset_Handler+0x14>
  SystemInit();
     16e:	f000 f8fb 	bl	368 <SystemInit>
  main();
     172:	f000 f84b 	bl	20c <main>
     176:	e7fe      	b.n	176 <Reset_Handler+0x12>
  if ((&__data_start__ != &__data_end__) && (pSrc != pDest)) {
     178:	4d0c      	ldr	r5, [pc, #48]	; (1ac <Reset_Handler+0x48>)
     17a:	2300      	movs	r3, #0
     17c:	428d      	cmp	r5, r1
     17e:	d0f6      	beq.n	16e <Reset_Handler+0xa>
     180:	18ca      	adds	r2, r1, r3
     182:	18e8      	adds	r0, r5, r3
    for (; pDest < &__data_end__; pDest++, pSrc++)
     184:	42a2      	cmp	r2, r4
     186:	d305      	bcc.n	194 <Reset_Handler+0x30>
  if ((&__data_start__ != &__data_end__) && (pSrc != pDest)) {
     188:	4290      	cmp	r0, r2
     18a:	d0f0      	beq.n	16e <Reset_Handler+0xa>
     18c:	4b08      	ldr	r3, [pc, #32]	; (1b0 <Reset_Handler+0x4c>)
    for (pDest = &__bss_start__; pDest < &__bss_end__; pDest++)
     18e:	4909      	ldr	r1, [pc, #36]	; (1b4 <Reset_Handler+0x50>)
      *pDest = 0;
     190:	2200      	movs	r2, #0
     192:	e004      	b.n	19e <Reset_Handler+0x3a>
      *pDest = *pSrc;
     194:	6800      	ldr	r0, [r0, #0]
     196:	3304      	adds	r3, #4
     198:	6010      	str	r0, [r2, #0]
     19a:	e7f1      	b.n	180 <Reset_Handler+0x1c>
      *pDest = 0;
     19c:	c304      	stmia	r3!, {r2}
    for (pDest = &__bss_start__; pDest < &__bss_end__; pDest++)
     19e:	428b      	cmp	r3, r1
     1a0:	d3fc      	bcc.n	19c <Reset_Handler+0x38>
     1a2:	e7e4      	b.n	16e <Reset_Handler+0xa>
     1a4:	20000000 	.word	0x20000000
     1a8:	20000020 	.word	0x20000020
     1ac:	000017b0 	.word	0x000017b0
     1b0:	20000020 	.word	0x20000020
     1b4:	2000035c 	.word	0x2000035c

000001b8 <SysTick_Handler>:
{
     1b8:	b510      	push	{r4, lr}
  if (sysTickHook())
     1ba:	f000 f824 	bl	206 <sysTickHook>
     1be:	2800      	cmp	r0, #0
     1c0:	d101      	bne.n	1c6 <SysTick_Handler+0xe>
  SysTick_DefaultHandler();
     1c2:	f000 f815 	bl	1f0 <SysTick_DefaultHandler>
}
     1c6:	bd10      	pop	{r4, pc}

000001c8 <millis>:
static volatile uint32_t _ulTickCount=0 ;

unsigned long millis( void )
{
// todo: ensure no interrupts
  return _ulTickCount ;
     1c8:	4b01      	ldr	r3, [pc, #4]	; (1d0 <millis+0x8>)
     1ca:	6818      	ldr	r0, [r3, #0]
}
     1cc:	4770      	bx	lr
     1ce:	46c0      	nop			; (mov r8, r8)
     1d0:	20000040 	.word	0x20000040

000001d4 <delay>:
  // this is an optimization to turn a runtime division into two compile-time divisions and
  // a runtime multiplication and shift, saving a few cycles
}

void delay( unsigned long ms )
{
     1d4:	b570      	push	{r4, r5, r6, lr}
     1d6:	1e04      	subs	r4, r0, #0
  if ( ms == 0 )
     1d8:	d007      	beq.n	1ea <delay+0x16>
  {
    return ;
  }

  uint32_t start = _ulTickCount ;
     1da:	4d04      	ldr	r5, [pc, #16]	; (1ec <delay+0x18>)
     1dc:	682e      	ldr	r6, [r5, #0]

  do
  {
    yield() ;
     1de:	f000 f811 	bl	204 <yield>
  } while ( _ulTickCount - start < ms ) ;
     1e2:	682b      	ldr	r3, [r5, #0]
     1e4:	1b9b      	subs	r3, r3, r6
     1e6:	429c      	cmp	r4, r3
     1e8:	d8f9      	bhi.n	1de <delay+0xa>
}
     1ea:	bd70      	pop	{r4, r5, r6, pc}
     1ec:	20000040 	.word	0x20000040

000001f0 <SysTick_DefaultHandler>:

#include "Reset.h" // for tickReset()

void SysTick_DefaultHandler(void)
{
     1f0:	b510      	push	{r4, lr}
  // Increment tick count each ms
  _ulTickCount++;
     1f2:	4a03      	ldr	r2, [pc, #12]	; (200 <SysTick_DefaultHandler+0x10>)
     1f4:	6813      	ldr	r3, [r2, #0]
     1f6:	3301      	adds	r3, #1
     1f8:	6013      	str	r3, [r2, #0]
  tickReset();
     1fa:	f000 f879 	bl	2f0 <tickReset>
}
     1fe:	bd10      	pop	{r4, pc}
     200:	20000040 	.word	0x20000040

00000204 <yield>:
 * Its defined as a weak symbol and it can be redefined to implement a
 * real cooperative scheduler.
 */
static void __empty() {
	// Empty
}
     204:	4770      	bx	lr

00000206 <sysTickHook>:
 * handler provided by Arduino.
 */
static int __false() {
	// Return false
	return 0;
}
     206:	2000      	movs	r0, #0
     208:	4770      	bx	lr

0000020a <_Z11initVariantv>:
#include "Arduino.h"

// Weak empty variant initialization function.
// May be redefined by variant files.
void initVariant() __attribute__((weak));
void initVariant() { }
     20a:	4770      	bx	lr

0000020c <main>:

/*
 * \brief Main entry point of Arduino application
 */
int main( void )
{
     20c:	b510      	push	{r4, lr}
  init();
     20e:	f000 fb55 	bl	8bc <init>

  __libc_init_array();
     212:	f001 f927 	bl	1464 <__libc_init_array>

  initVariant();
     216:	f7ff fff8 	bl	20a <_Z11initVariantv>

  delay(1);
     21a:	2001      	movs	r0, #1
     21c:	f7ff ffda 	bl	1d4 <delay>
#if defined(USBCON)
  USBDevice.init();
  USBDevice.attach();
#endif

  setup();
     220:	f7ff ff80 	bl	124 <setup>

  for (;;)
  {
    loop();
     224:	f7ff ff6e 	bl	104 <loop>
    if (serialEventRun) serialEventRun();
     228:	4b02      	ldr	r3, [pc, #8]	; (234 <main+0x28>)
     22a:	2b00      	cmp	r3, #0
     22c:	d0fa      	beq.n	224 <main+0x18>
     22e:	e000      	b.n	232 <main+0x26>
     230:	bf00      	nop
     232:	e7f7      	b.n	224 <main+0x18>
     234:	00000000 	.word	0x00000000

00000238 <_ZN5Print17availableForWriteEv>:
      return write((const uint8_t *)buffer, size);
    }

    // default to zero, meaning "a single write may block"
    // should be overriden by subclasses with buffering
    virtual int availableForWrite() { return 0; }
     238:	2000      	movs	r0, #0
     23a:	4770      	bx	lr

0000023c <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
     23c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
     23e:	0006      	movs	r6, r0
     240:	000d      	movs	r5, r1
     242:	000c      	movs	r4, r1
     244:	188b      	adds	r3, r1, r2
     246:	9301      	str	r3, [sp, #4]
  size_t n = 0;
  while (size--) {
     248:	9b01      	ldr	r3, [sp, #4]
     24a:	1b67      	subs	r7, r4, r5
     24c:	429c      	cmp	r4, r3
     24e:	d007      	beq.n	260 <_ZN5Print5writeEPKhj+0x24>
    if (write(*buffer++)) n++;
     250:	6833      	ldr	r3, [r6, #0]
     252:	7821      	ldrb	r1, [r4, #0]
     254:	681b      	ldr	r3, [r3, #0]
     256:	0030      	movs	r0, r6
     258:	4798      	blx	r3
     25a:	3401      	adds	r4, #1
     25c:	2800      	cmp	r0, #0
     25e:	d1f3      	bne.n	248 <_ZN5Print5writeEPKhj+0xc>
    else break;
  }
  return n;
}
     260:	0038      	movs	r0, r7
     262:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

00000264 <_ZN5Print5writeEPKc>:
    size_t write(const char *str) {
     264:	b570      	push	{r4, r5, r6, lr}
     266:	0005      	movs	r5, r0
     268:	000c      	movs	r4, r1
      if (str == NULL) return 0;
     26a:	1e08      	subs	r0, r1, #0
     26c:	d007      	beq.n	27e <_ZN5Print5writeEPKc+0x1a>
      return write((const uint8_t *)str, strlen(str));
     26e:	f001 f925 	bl	14bc <strlen>
     272:	682b      	ldr	r3, [r5, #0]
     274:	0002      	movs	r2, r0
     276:	685b      	ldr	r3, [r3, #4]
     278:	0021      	movs	r1, r4
     27a:	0028      	movs	r0, r5
     27c:	4798      	blx	r3
    }
     27e:	bd70      	pop	{r4, r5, r6, pc}

00000280 <_ZN5Print11printNumberEmh>:
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base)
{
     280:	b5f0      	push	{r4, r5, r6, r7, lr}
     282:	0016      	movs	r6, r2
  char buf[8 * sizeof(long) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
     284:	2200      	movs	r2, #0
{
     286:	b08d      	sub	sp, #52	; 0x34
  *str = '\0';
     288:	ab02      	add	r3, sp, #8
     28a:	3305      	adds	r3, #5
{
     28c:	9001      	str	r0, [sp, #4]
     28e:	000d      	movs	r5, r1
  *str = '\0';
     290:	77da      	strb	r2, [r3, #31]

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
     292:	2e01      	cmp	r6, #1
     294:	dc00      	bgt.n	298 <_ZN5Print11printNumberEmh+0x18>
     296:	260a      	movs	r6, #10
     298:	ac0b      	add	r4, sp, #44	; 0x2c

  do {
    char c = n % base;
     29a:	0028      	movs	r0, r5
     29c:	0031      	movs	r1, r6
     29e:	f001 f8db 	bl	1458 <__aeabi_uidivmod>
     2a2:	000f      	movs	r7, r1
     2a4:	b2cb      	uxtb	r3, r1
    n /= base;
     2a6:	0028      	movs	r0, r5
     2a8:	0031      	movs	r1, r6
    char c = n % base;
     2aa:	9300      	str	r3, [sp, #0]
    n /= base;
     2ac:	f001 f84e 	bl	134c <__udivsi3>

    *--str = c < 10 ? c + '0' : c + 'A' - 10;
     2b0:	b2fb      	uxtb	r3, r7
     2b2:	3337      	adds	r3, #55	; 0x37
    n /= base;
     2b4:	0005      	movs	r5, r0
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
     2b6:	3c01      	subs	r4, #1
     2b8:	b2db      	uxtb	r3, r3
     2ba:	2f09      	cmp	r7, #9
     2bc:	d802      	bhi.n	2c4 <_ZN5Print11printNumberEmh+0x44>
     2be:	9b00      	ldr	r3, [sp, #0]
     2c0:	3330      	adds	r3, #48	; 0x30
     2c2:	b2db      	uxtb	r3, r3
     2c4:	7023      	strb	r3, [r4, #0]
  } while(n);
     2c6:	2d00      	cmp	r5, #0
     2c8:	d1e7      	bne.n	29a <_ZN5Print11printNumberEmh+0x1a>

  return write(str);
     2ca:	0021      	movs	r1, r4
     2cc:	9801      	ldr	r0, [sp, #4]
     2ce:	f7ff ffc9 	bl	264 <_ZN5Print5writeEPKc>
}
     2d2:	b00d      	add	sp, #52	; 0x34
     2d4:	bdf0      	pop	{r4, r5, r6, r7, pc}

000002d6 <_ZN5Print5printEmi>:
{
     2d6:	b510      	push	{r4, lr}
  if (base == 0) return write(n);
     2d8:	2a00      	cmp	r2, #0
     2da:	d104      	bne.n	2e6 <_ZN5Print5printEmi+0x10>
     2dc:	6803      	ldr	r3, [r0, #0]
     2de:	b2c9      	uxtb	r1, r1
     2e0:	681b      	ldr	r3, [r3, #0]
     2e2:	4798      	blx	r3
}
     2e4:	bd10      	pop	{r4, pc}
  else return printNumber(n, base);
     2e6:	b2d2      	uxtb	r2, r2
     2e8:	f7ff ffca 	bl	280 <_ZN5Print11printNumberEmh>
     2ec:	e7fa      	b.n	2e4 <_ZN5Print5printEmi+0xe>
	...

000002f0 <tickReset>:
void cancelReset() {
	ticks = -1;
}

void tickReset() {
	if (ticks == -1)
     2f0:	4a16      	ldr	r2, [pc, #88]	; (34c <tickReset+0x5c>)
void tickReset() {
     2f2:	b510      	push	{r4, lr}
	if (ticks == -1)
     2f4:	6813      	ldr	r3, [r2, #0]
     2f6:	1c59      	adds	r1, r3, #1
     2f8:	d027      	beq.n	34a <tickReset+0x5a>
		return;
	ticks--;
     2fa:	3b01      	subs	r3, #1
     2fc:	6013      	str	r3, [r2, #0]
	if (ticks == 0)
     2fe:	2b00      	cmp	r3, #0
     300:	d123      	bne.n	34a <tickReset+0x5a>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__attribute__((always_inline)) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
     302:	b672      	cpsid	i
	if (APP_START < (0x200 + 4)) {
     304:	4b12      	ldr	r3, [pc, #72]	; (350 <tickReset+0x60>)
     306:	4a13      	ldr	r2, [pc, #76]	; (354 <tickReset+0x64>)
     308:	3304      	adds	r3, #4
     30a:	4293      	cmp	r3, r2
     30c:	d808      	bhi.n	320 <tickReset+0x30>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__((always_inline)) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
     30e:	f3bf 8f4f 	dsb	sy
 */
__STATIC_INLINE void NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = ((0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
     312:	4a11      	ldr	r2, [pc, #68]	; (358 <tickReset+0x68>)
     314:	4b11      	ldr	r3, [pc, #68]	; (35c <tickReset+0x6c>)
     316:	60da      	str	r2, [r3, #12]
     318:	f3bf 8f4f 	dsb	sy
                 SCB_AIRCR_SYSRESETREQ_Msk);
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
     31c:	46c0      	nop			; (mov r8, r8)
     31e:	e7fd      	b.n	31c <tickReset+0x2c>
        return NVMCTRL->INTFLAG.reg & NVMCTRL_INTFLAG_READY;
     320:	4a0f      	ldr	r2, [pc, #60]	; (360 <tickReset+0x70>)
	while (!nvmReady())
     322:	2101      	movs	r1, #1
     324:	0010      	movs	r0, r2
        return NVMCTRL->INTFLAG.reg & NVMCTRL_INTFLAG_READY;
     326:	7d14      	ldrb	r4, [r2, #20]
	while (!nvmReady())
     328:	420c      	tst	r4, r1
     32a:	d0fc      	beq.n	326 <tickReset+0x36>
	NVMCTRL->STATUS.reg |= NVMCTRL_STATUS_MASK;
     32c:	2120      	movs	r1, #32
     32e:	8b14      	ldrh	r4, [r2, #24]
     330:	31ff      	adds	r1, #255	; 0xff
	NVMCTRL->ADDR.reg  = (uintptr_t)&NVM_MEMORY[APP_START / 4];
     332:	089b      	lsrs	r3, r3, #2
     334:	005b      	lsls	r3, r3, #1
	NVMCTRL->STATUS.reg |= NVMCTRL_STATUS_MASK;
     336:	4321      	orrs	r1, r4
     338:	8311      	strh	r1, [r2, #24]
	NVMCTRL->ADDR.reg  = (uintptr_t)&NVM_MEMORY[APP_START / 4];
     33a:	61d3      	str	r3, [r2, #28]
	NVMCTRL->CTRLA.reg = NVMCTRL_CTRLA_CMD_ER | NVMCTRL_CTRLA_CMDEX_KEY;
     33c:	4b09      	ldr	r3, [pc, #36]	; (364 <tickReset+0x74>)
     33e:	8013      	strh	r3, [r2, #0]
	while (!nvmReady())
     340:	2301      	movs	r3, #1
        return NVMCTRL->INTFLAG.reg & NVMCTRL_INTFLAG_READY;
     342:	7d02      	ldrb	r2, [r0, #20]
	while (!nvmReady())
     344:	421a      	tst	r2, r3
     346:	d0fc      	beq.n	342 <tickReset+0x52>
     348:	e7e1      	b.n	30e <tickReset+0x1e>
		banzai();
}
     34a:	bd10      	pop	{r4, pc}
     34c:	20000000 	.word	0x20000000
     350:	00000000 	.word	0x00000000
     354:	00000203 	.word	0x00000203
     358:	05fa0004 	.word	0x05fa0004
     35c:	e000ed00 	.word	0xe000ed00
     360:	41004000 	.word	0x41004000
     364:	ffffa502 	.word	0xffffa502

00000368 <SystemInit>:
#define GENERIC_CLOCK_MULTIPLEXER_DFLL48M (0u)

void SystemInit( void )
{
  /* Set 1 Flash Wait State for 48MHz, cf tables 20.9 and 35.27 in SAMD21 Datasheet */
  NVMCTRL->CTRLB.bit.RWS = NVMCTRL_CTRLB_RWS_HALF_Val ;
     368:	221e      	movs	r2, #30
{
     36a:	b570      	push	{r4, r5, r6, lr}
  NVMCTRL->CTRLB.bit.RWS = NVMCTRL_CTRLB_RWS_HALF_Val ;
     36c:	4846      	ldr	r0, [pc, #280]	; (488 <SystemInit+0x120>)

  /* Turn on the digital interface clock */
  PM->APBAMASK.reg |= PM_APBAMASK_GCLK ;
     36e:	4947      	ldr	r1, [pc, #284]	; (48c <SystemInit+0x124>)
  NVMCTRL->CTRLB.bit.RWS = NVMCTRL_CTRLB_RWS_HALF_Val ;
     370:	6843      	ldr	r3, [r0, #4]
     372:	4393      	bics	r3, r2
     374:	3a1c      	subs	r2, #28
     376:	4313      	orrs	r3, r2
     378:	6043      	str	r3, [r0, #4]
  PM->APBAMASK.reg |= PM_APBAMASK_GCLK ;
     37a:	2308      	movs	r3, #8
     37c:	698c      	ldr	r4, [r1, #24]
     37e:	4323      	orrs	r3, r4
     380:	618b      	str	r3, [r1, #24]
#else // has crystal

  /* ----------------------------------------------------------------------------------------------
   * 1) Enable XOSC32K clock (External on-board 32.768Hz oscillator)
   */
  SYSCTRL->XOSC32K.reg = SYSCTRL_XOSC32K_STARTUP( 0x6u ) | /* cf table 15.10 of product datasheet in chapter 15.8.6 */
     382:	4c43      	ldr	r4, [pc, #268]	; (490 <SystemInit+0x128>)
     384:	4b43      	ldr	r3, [pc, #268]	; (494 <SystemInit+0x12c>)
     386:	829c      	strh	r4, [r3, #20]
                         SYSCTRL_XOSC32K_XTALEN | SYSCTRL_XOSC32K_EN32K ;
  SYSCTRL->XOSC32K.bit.ENABLE = 1 ; /* separate call, as described in chapter 15.6.3 */
     388:	8a9c      	ldrh	r4, [r3, #20]
     38a:	4314      	orrs	r4, r2
     38c:	829c      	strh	r4, [r3, #20]

  while ( (SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_XOSC32KRDY) == 0 )
     38e:	68dc      	ldr	r4, [r3, #12]
     390:	4214      	tst	r4, r2
     392:	d0fc      	beq.n	38e <SystemInit+0x26>

  /* Software reset the module to ensure it is re-initialized correctly */
  /* Note: Due to synchronization, there is a delay from writing CTRL.SWRST until the reset is complete.
   * CTRL.SWRST and STATUS.SYNCBUSY will both be cleared when the reset is complete, as described in chapter 13.8.1
   */
  GCLK->CTRL.reg = GCLK_CTRL_SWRST ;
     394:	2401      	movs	r4, #1
     396:	4a40      	ldr	r2, [pc, #256]	; (498 <SystemInit+0x130>)
     398:	7014      	strb	r4, [r2, #0]

  while ( (GCLK->CTRL.reg & GCLK_CTRL_SWRST) && (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY) )
     39a:	7815      	ldrb	r5, [r2, #0]
     39c:	4225      	tst	r5, r4
     39e:	d003      	beq.n	3a8 <SystemInit+0x40>
     3a0:	7855      	ldrb	r5, [r2, #1]
     3a2:	b26d      	sxtb	r5, r5
     3a4:	2d00      	cmp	r5, #0
     3a6:	dbf8      	blt.n	39a <SystemInit+0x32>
  }

  /* ----------------------------------------------------------------------------------------------
   * 2) Put XOSC32K as source of Generic Clock Generator 1
   */
  GCLK->GENDIV.reg = GCLK_GENDIV_ID( GENERIC_CLOCK_GENERATOR_XOSC32K ) ; // Generic Clock Generator 1
     3a8:	2401      	movs	r4, #1
     3aa:	6094      	str	r4, [r2, #8]

  while ( GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY )
     3ac:	7854      	ldrb	r4, [r2, #1]
     3ae:	b264      	sxtb	r4, r4
     3b0:	2c00      	cmp	r4, #0
     3b2:	dbfb      	blt.n	3ac <SystemInit+0x44>
  {
    /* Wait for synchronization */
  }

  /* Write Generic Clock Generator 1 configuration */
  GCLK->GENCTRL.reg = GCLK_GENCTRL_ID( GENERIC_CLOCK_GENERATOR_OSC32K ) | // Generic Clock Generator 1
     3b4:	4c39      	ldr	r4, [pc, #228]	; (49c <SystemInit+0x134>)
     3b6:	6054      	str	r4, [r2, #4]
                      GCLK_GENCTRL_SRC_XOSC32K | // Selected source is External 32KHz Oscillator
#endif
//                      GCLK_GENCTRL_OE | // Output clock to a pin for tests
                      GCLK_GENCTRL_GENEN ;

  while ( GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY )
     3b8:	7854      	ldrb	r4, [r2, #1]
     3ba:	b264      	sxtb	r4, r4
     3bc:	2c00      	cmp	r4, #0
     3be:	dbfb      	blt.n	3b8 <SystemInit+0x50>
  }

  /* ----------------------------------------------------------------------------------------------
   * 3) Put Generic Clock Generator 1 as source for Generic Clock Multiplexer 0 (DFLL48M reference)
   */
  GCLK->CLKCTRL.reg = GCLK_CLKCTRL_ID( GENERIC_CLOCK_MULTIPLEXER_DFLL48M ) | // Generic Clock Multiplexer 0
     3c0:	2482      	movs	r4, #130	; 0x82
     3c2:	01e4      	lsls	r4, r4, #7
     3c4:	8054      	strh	r4, [r2, #2]
                      GCLK_CLKCTRL_GEN_GCLK1 | // Generic Clock Generator 1 is source
                      GCLK_CLKCTRL_CLKEN ;

  while ( GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY )
     3c6:	7854      	ldrb	r4, [r2, #1]
     3c8:	b264      	sxtb	r4, r4
     3ca:	2c00      	cmp	r4, #0
     3cc:	dbfb      	blt.n	3c6 <SystemInit+0x5e>
   */

  /* DFLL Configuration in Closed Loop mode, cf product datasheet chapter 15.6.7.1 - Closed-Loop Operation */

  /* Remove the OnDemand mode, Bug http://avr32.icgroup.norway.atmel.com/bugzilla/show_bug.cgi?id=9905 */
  SYSCTRL->DFLLCTRL.reg = SYSCTRL_DFLLCTRL_ENABLE;
     3ce:	2402      	movs	r4, #2
     3d0:	849c      	strh	r4, [r3, #36]	; 0x24

  while ( (SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY) == 0 )
     3d2:	340e      	adds	r4, #14
     3d4:	68dd      	ldr	r5, [r3, #12]
     3d6:	4225      	tst	r5, r4
     3d8:	d0fc      	beq.n	3d4 <SystemInit+0x6c>
  {
    /* Wait for synchronization */
  }

  SYSCTRL->DFLLMUL.reg = SYSCTRL_DFLLMUL_CSTEP( 31 ) | // Coarse step is 31, half of the max value
     3da:	4c31      	ldr	r4, [pc, #196]	; (4a0 <SystemInit+0x138>)
     3dc:	62dc      	str	r4, [r3, #44]	; 0x2c
                         SYSCTRL_DFLLMUL_FSTEP( 511 ) | // Fine step is 511, half of the max value
                         SYSCTRL_DFLLMUL_MUL( (VARIANT_MCK + VARIANT_MAINOSC/2) / VARIANT_MAINOSC ) ; // External 32KHz is the reference

  while ( (SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY) == 0 )
     3de:	2410      	movs	r4, #16
     3e0:	68dd      	ldr	r5, [r3, #12]
     3e2:	4225      	tst	r5, r4
     3e4:	d0fc      	beq.n	3e0 <SystemInit+0x78>
  SYSCTRL->DFLLCTRL.reg |= SYSCTRL_DFLLCTRL_ENABLE ;

#else   // has crystal

  /* Write full configuration to DFLL control register */
  SYSCTRL->DFLLCTRL.reg |= SYSCTRL_DFLLCTRL_MODE | /* Enable the closed loop mode */
     3e6:	2481      	movs	r4, #129	; 0x81
     3e8:	8c9d      	ldrh	r5, [r3, #36]	; 0x24
     3ea:	00a4      	lsls	r4, r4, #2
     3ec:	432c      	orrs	r4, r5
     3ee:	849c      	strh	r4, [r3, #36]	; 0x24
#ifndef SAMD20
                           SYSCTRL_DFLLCTRL_WAITLOCK |
#endif /* SAMD20 */
                           SYSCTRL_DFLLCTRL_QLDIS ; /* Disable Quick lock */

  while ( (SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY) == 0 )
     3f0:	2410      	movs	r4, #16
     3f2:	68dd      	ldr	r5, [r3, #12]
     3f4:	4225      	tst	r5, r4
     3f6:	d0fc      	beq.n	3f2 <SystemInit+0x8a>
  {
    /* Wait for synchronization */
  }

  /* Enable the DFLL */
  SYSCTRL->DFLLCTRL.reg |= SYSCTRL_DFLLCTRL_ENABLE ;
     3f8:	2402      	movs	r4, #2
     3fa:	8c9d      	ldrh	r5, [r3, #36]	; 0x24

  while ( (SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLLCKC) == 0 ||
     3fc:	2680      	movs	r6, #128	; 0x80
  SYSCTRL->DFLLCTRL.reg |= SYSCTRL_DFLLCTRL_ENABLE ;
     3fe:	432c      	orrs	r4, r5
     400:	849c      	strh	r4, [r3, #36]	; 0x24
          (SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLLCKF) == 0 )
     402:	2440      	movs	r4, #64	; 0x40
  while ( (SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLLCKC) == 0 ||
     404:	68dd      	ldr	r5, [r3, #12]
     406:	4235      	tst	r5, r6
     408:	d0fc      	beq.n	404 <SystemInit+0x9c>
          (SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLLCKF) == 0 )
     40a:	68dd      	ldr	r5, [r3, #12]
  while ( (SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLLCKC) == 0 ||
     40c:	4225      	tst	r5, r4
     40e:	d0f9      	beq.n	404 <SystemInit+0x9c>
    /* Wait for locks flags */
  }

#endif

  while ( (SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY) == 0 )
     410:	2410      	movs	r4, #16
     412:	68dd      	ldr	r5, [r3, #12]
     414:	4225      	tst	r5, r4
     416:	d0fc      	beq.n	412 <SystemInit+0xaa>
  }

  /* ----------------------------------------------------------------------------------------------
   * 5) Switch Generic Clock Generator 0 to DFLL48M. CPU will run at 48MHz.
   */
  GCLK->GENDIV.reg = GCLK_GENDIV_ID( GENERIC_CLOCK_GENERATOR_MAIN ) ; // Generic Clock Generator 0
     418:	2400      	movs	r4, #0
     41a:	6094      	str	r4, [r2, #8]

  while ( GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY )
     41c:	7854      	ldrb	r4, [r2, #1]
     41e:	b264      	sxtb	r4, r4
     420:	2c00      	cmp	r4, #0
     422:	dbfb      	blt.n	41c <SystemInit+0xb4>
  {
    /* Wait for synchronization */
  }

  /* Write Generic Clock Generator 0 configuration */
  GCLK->GENCTRL.reg = GCLK_GENCTRL_ID( GENERIC_CLOCK_GENERATOR_MAIN ) | // Generic Clock Generator 0
     424:	4c1f      	ldr	r4, [pc, #124]	; (4a4 <SystemInit+0x13c>)
     426:	6054      	str	r4, [r2, #4]
                      GCLK_GENCTRL_SRC_DFLL48M | // Selected source is DFLL 48MHz
//                      GCLK_GENCTRL_OE | // Output clock to a pin for tests
                      GCLK_GENCTRL_IDC | // Set 50/50 duty cycle
                      GCLK_GENCTRL_GENEN ;

  while ( GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY )
     428:	7854      	ldrb	r4, [r2, #1]
     42a:	b264      	sxtb	r4, r4
     42c:	2c00      	cmp	r4, #0
     42e:	dbfb      	blt.n	428 <SystemInit+0xc0>
  }

  /* ----------------------------------------------------------------------------------------------
   * 6) Modify PRESCaler value of OSC8M to have 8MHz
   */
  SYSCTRL->OSC8M.bit.PRESC = 
     430:	6a1c      	ldr	r4, [r3, #32]
     432:	4d1d      	ldr	r5, [pc, #116]	; (4a8 <SystemInit+0x140>)
     434:	402c      	ands	r4, r5
#ifndef SAMD20
      SYSCTRL_OSC8M_PRESC_0_Val ;  //CMSIS 4.5 changed the prescaler defines
#else
      SYSCTRL_OSC8M_PRESC(0x0);
#endif /* SAMD20 */
  SYSCTRL->OSC8M.bit.ONDEMAND = 0 ;
     436:	2580      	movs	r5, #128	; 0x80
  SYSCTRL->OSC8M.bit.PRESC = 
     438:	621c      	str	r4, [r3, #32]
  SYSCTRL->OSC8M.bit.ONDEMAND = 0 ;
     43a:	6a1c      	ldr	r4, [r3, #32]
     43c:	43ac      	bics	r4, r5
     43e:	621c      	str	r4, [r3, #32]

  /* ----------------------------------------------------------------------------------------------
   * 7) Put OSC8M as source for Generic Clock Generator 3
   */
  GCLK->GENDIV.reg = GCLK_GENDIV_ID( GENERIC_CLOCK_GENERATOR_OSC8M ) ; // Generic Clock Generator 3
     440:	2303      	movs	r3, #3
     442:	6093      	str	r3, [r2, #8]

  /* Write Generic Clock Generator 3 configuration */
  GCLK->GENCTRL.reg = GCLK_GENCTRL_ID( GENERIC_CLOCK_GENERATOR_OSC8M ) | // Generic Clock Generator 3
     444:	4b19      	ldr	r3, [pc, #100]	; (4ac <SystemInit+0x144>)
     446:	6053      	str	r3, [r2, #4]
                      GCLK_GENCTRL_SRC_OSC8M | // Selected source is RC OSC 8MHz (already enabled at reset)
//                      GCLK_GENCTRL_OE | // Output clock to a pin for tests
                      GCLK_GENCTRL_GENEN ;

  while ( GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY )
     448:	7853      	ldrb	r3, [r2, #1]
     44a:	b25b      	sxtb	r3, r3
     44c:	2b00      	cmp	r3, #0
     44e:	dbfb      	blt.n	448 <SystemInit+0xe0>

  /*
   * Now that all system clocks are configured, we can set CPU and APBx BUS clocks.
   * There values are normally the one present after Reset.
   */
  PM->CPUSEL.reg  = PM_CPUSEL_CPUDIV_DIV1 ;
     450:	2300      	movs	r3, #0

  // ADC Linearity bits 4:0
  uint32_t linearity = (*((uint32_t *) ADC_FUSES_LINEARITY_0_ADDR) & ADC_FUSES_LINEARITY_0_Msk) >> ADC_FUSES_LINEARITY_0_Pos;

  // ADC Linearity bits 7:5
  linearity |= ((*((uint32_t *) ADC_FUSES_LINEARITY_1_ADDR) & ADC_FUSES_LINEARITY_1_Msk) >> ADC_FUSES_LINEARITY_1_Pos) << 5;
     452:	24ff      	movs	r4, #255	; 0xff
  PM->CPUSEL.reg  = PM_CPUSEL_CPUDIV_DIV1 ;
     454:	720b      	strb	r3, [r1, #8]
  SystemCoreClock=VARIANT_MCK ;
     456:	4a16      	ldr	r2, [pc, #88]	; (4b0 <SystemInit+0x148>)
  PM->APBASEL.reg = PM_APBASEL_APBADIV_DIV1_Val ;
     458:	724b      	strb	r3, [r1, #9]
  PM->APBBSEL.reg = PM_APBBSEL_APBBDIV_DIV1_Val ;
     45a:	728b      	strb	r3, [r1, #10]
  PM->APBCSEL.reg = PM_APBCSEL_APBCDIV_DIV1_Val ;
     45c:	72cb      	strb	r3, [r1, #11]
  SystemCoreClock=VARIANT_MCK ;
     45e:	4b15      	ldr	r3, [pc, #84]	; (4b4 <SystemInit+0x14c>)
     460:	601a      	str	r2, [r3, #0]
  uint32_t bias = (*((uint32_t *) ADC_FUSES_BIASCAL_ADDR) & ADC_FUSES_BIASCAL_Msk) >> ADC_FUSES_BIASCAL_Pos;
     462:	4b15      	ldr	r3, [pc, #84]	; (4b8 <SystemInit+0x150>)
  uint32_t linearity = (*((uint32_t *) ADC_FUSES_LINEARITY_0_ADDR) & ADC_FUSES_LINEARITY_0_Msk) >> ADC_FUSES_LINEARITY_0_Pos;
     464:	4a15      	ldr	r2, [pc, #84]	; (4bc <SystemInit+0x154>)
  uint32_t bias = (*((uint32_t *) ADC_FUSES_BIASCAL_ADDR) & ADC_FUSES_BIASCAL_Msk) >> ADC_FUSES_BIASCAL_Pos;
     466:	681b      	ldr	r3, [r3, #0]
  uint32_t linearity = (*((uint32_t *) ADC_FUSES_LINEARITY_0_ADDR) & ADC_FUSES_LINEARITY_0_Msk) >> ADC_FUSES_LINEARITY_0_Pos;
     468:	6811      	ldr	r1, [r2, #0]
  uint32_t bias = (*((uint32_t *) ADC_FUSES_BIASCAL_ADDR) & ADC_FUSES_BIASCAL_Msk) >> ADC_FUSES_BIASCAL_Pos;
     46a:	069a      	lsls	r2, r3, #26
  linearity |= ((*((uint32_t *) ADC_FUSES_LINEARITY_1_ADDR) & ADC_FUSES_LINEARITY_1_Msk) >> ADC_FUSES_LINEARITY_1_Pos) << 5;
     46c:	015b      	lsls	r3, r3, #5
  uint32_t linearity = (*((uint32_t *) ADC_FUSES_LINEARITY_0_ADDR) & ADC_FUSES_LINEARITY_0_Msk) >> ADC_FUSES_LINEARITY_0_Pos;
     46e:	0ec9      	lsrs	r1, r1, #27
  linearity |= ((*((uint32_t *) ADC_FUSES_LINEARITY_1_ADDR) & ADC_FUSES_LINEARITY_1_Msk) >> ADC_FUSES_LINEARITY_1_Pos) << 5;
     470:	4023      	ands	r3, r4
  uint32_t bias = (*((uint32_t *) ADC_FUSES_BIASCAL_ADDR) & ADC_FUSES_BIASCAL_Msk) >> ADC_FUSES_BIASCAL_Pos;
     472:	0f52      	lsrs	r2, r2, #29

  ADC->CALIB.reg = ADC_CALIB_BIAS_CAL(bias) | ADC_CALIB_LINEARITY_CAL(linearity);
     474:	0212      	lsls	r2, r2, #8
  linearity |= ((*((uint32_t *) ADC_FUSES_LINEARITY_1_ADDR) & ADC_FUSES_LINEARITY_1_Msk) >> ADC_FUSES_LINEARITY_1_Pos) << 5;
     476:	430b      	orrs	r3, r1
  ADC->CALIB.reg = ADC_CALIB_BIAS_CAL(bias) | ADC_CALIB_LINEARITY_CAL(linearity);
     478:	4313      	orrs	r3, r2
     47a:	4a11      	ldr	r2, [pc, #68]	; (4c0 <SystemInit+0x158>)
     47c:	8513      	strh	r3, [r2, #40]	; 0x28

  /*
   * 9) Disable automatic NVM write operations
   */
  NVMCTRL->CTRLB.bit.MANW = 1;
     47e:	2380      	movs	r3, #128	; 0x80
     480:	6842      	ldr	r2, [r0, #4]
     482:	4313      	orrs	r3, r2
     484:	6043      	str	r3, [r0, #4]
}
     486:	bd70      	pop	{r4, r5, r6, pc}
     488:	41004000 	.word	0x41004000
     48c:	40000400 	.word	0x40000400
     490:	0000060c 	.word	0x0000060c
     494:	40000800 	.word	0x40000800
     498:	40000c00 	.word	0x40000c00
     49c:	00010501 	.word	0x00010501
     4a0:	7dff05b9 	.word	0x7dff05b9
     4a4:	00030700 	.word	0x00030700
     4a8:	fffffcff 	.word	0xfffffcff
     4ac:	00010603 	.word	0x00010603
     4b0:	02dc6c00 	.word	0x02dc6c00
     4b4:	20000004 	.word	0x20000004
     4b8:	00806024 	.word	0x00806024
     4bc:	00806020 	.word	0x00806020
     4c0:	42004000 	.word	0x42004000

000004c4 <_ZN4UartcvbEv>:
    size_t write(const uint8_t data);
    using Print::write; // pull in write(str) and write(buf, size) from Print

    void IrqHandler();

    operator bool() { return true; }
     4c4:	2001      	movs	r0, #1
     4c6:	4770      	bx	lr

000004c8 <_ZN4Uart5beginEm>:
  uc_pinRTS = _pinRTS;
  uc_pinCTS = _pinCTS;
}

void Uart::begin(unsigned long baudrate)
{
     4c8:	b510      	push	{r4, lr}
  begin(baudrate, SERIAL_8N1);
     4ca:	6803      	ldr	r3, [r0, #0]
     4cc:	4a01      	ldr	r2, [pc, #4]	; (4d4 <_ZN4Uart5beginEm+0xc>)
     4ce:	6a1b      	ldr	r3, [r3, #32]
     4d0:	4798      	blx	r3
}
     4d2:	bd10      	pop	{r4, pc}
     4d4:	00000413 	.word	0x00000413

000004d8 <_ZN4Uart4peekEv>:
}

template <int N>
int RingBufferN<N>::peek()
{
  if(_iTail == _iHead)
     4d8:	6d82      	ldr	r2, [r0, #88]	; 0x58
     4da:	6d43      	ldr	r3, [r0, #84]	; 0x54
     4dc:	429a      	cmp	r2, r3
     4de:	d003      	beq.n	4e8 <_ZN4Uart4peekEv+0x10>
    return -1;

  return _aucBuffer[_iTail];
     4e0:	6d83      	ldr	r3, [r0, #88]	; 0x58
     4e2:	18c0      	adds	r0, r0, r3
     4e4:	7d00      	ldrb	r0, [r0, #20]
}

int Uart::peek()
{
  return rxBuffer.peek();
}
     4e6:	4770      	bx	lr
    return -1;
     4e8:	2001      	movs	r0, #1
     4ea:	4240      	negs	r0, r0
  return rxBuffer.peek();
     4ec:	e7fb      	b.n	4e6 <_ZN4Uart4peekEv+0xe>

000004ee <_ZN4Uart3endEv>:
{
     4ee:	b510      	push	{r4, lr}
     4f0:	0004      	movs	r4, r0
  sercom->resetUART();
     4f2:	6900      	ldr	r0, [r0, #16]
     4f4:	f000 fd55 	bl	fa2 <_ZN6SERCOM9resetUARTEv>
  _iHead = 0;
     4f8:	2300      	movs	r3, #0
     4fa:	0022      	movs	r2, r4
     4fc:	6563      	str	r3, [r4, #84]	; 0x54
     4fe:	329c      	adds	r2, #156	; 0x9c
  _iTail = 0;
     500:	65a3      	str	r3, [r4, #88]	; 0x58
     502:	34a0      	adds	r4, #160	; 0xa0
  _iHead = 0;
     504:	6013      	str	r3, [r2, #0]
  _iTail = 0;
     506:	6023      	str	r3, [r4, #0]
}
     508:	bd10      	pop	{r4, pc}

0000050a <_ZN4Uart16extractNbStopBitEt>:
  return 1;
}

SercomNumberStopBit Uart::extractNbStopBit(uint16_t config)
{
  switch(config & HARDSER_STOP_BIT_MASK)
     50a:	20f0      	movs	r0, #240	; 0xf0
     50c:	4001      	ands	r1, r0
  {
    case HARDSER_STOP_BIT_1:
    default:
      return SERCOM_STOP_BIT_1;
     50e:	3930      	subs	r1, #48	; 0x30
     510:	4248      	negs	r0, r1
     512:	4148      	adcs	r0, r1

    case HARDSER_STOP_BIT_2:
      return SERCOM_STOP_BITS_2;
  }
}
     514:	4770      	bx	lr

00000516 <_ZN4Uart15extractCharSizeEt>:

SercomUartCharSize Uart::extractCharSize(uint16_t config)
{
  switch(config & HARDSER_DATA_MASK)
     516:	23f0      	movs	r3, #240	; 0xf0
     518:	011b      	lsls	r3, r3, #4
     51a:	4019      	ands	r1, r3
     51c:	2380      	movs	r3, #128	; 0x80
  {
    case HARDSER_DATA_5:
      return UART_CHAR_SIZE_5_BITS;

    case HARDSER_DATA_6:
      return UART_CHAR_SIZE_6_BITS;
     51e:	2006      	movs	r0, #6
  switch(config & HARDSER_DATA_MASK)
     520:	009b      	lsls	r3, r3, #2
     522:	4299      	cmp	r1, r3
     524:	d00a      	beq.n	53c <_ZN4Uart15extractCharSizeEt+0x26>
     526:	3301      	adds	r3, #1
     528:	33ff      	adds	r3, #255	; 0xff

    case HARDSER_DATA_7:
      return UART_CHAR_SIZE_7_BITS;
     52a:	3001      	adds	r0, #1
  switch(config & HARDSER_DATA_MASK)
     52c:	4299      	cmp	r1, r3
     52e:	d005      	beq.n	53c <_ZN4Uart15extractCharSizeEt+0x26>
     530:	2380      	movs	r3, #128	; 0x80
      return UART_CHAR_SIZE_5_BITS;
     532:	3802      	subs	r0, #2
  switch(config & HARDSER_DATA_MASK)
     534:	005b      	lsls	r3, r3, #1
     536:	4299      	cmp	r1, r3
     538:	d000      	beq.n	53c <_ZN4Uart15extractCharSizeEt+0x26>

    case HARDSER_DATA_8:
    default:
      return UART_CHAR_SIZE_8_BITS;
     53a:	2000      	movs	r0, #0

  }
}
     53c:	4770      	bx	lr

0000053e <_ZN4Uart13extractParityEt>:

SercomParityMode Uart::extractParity(uint16_t config)
{
  switch(config & HARDSER_PARITY_MASK)
     53e:	200f      	movs	r0, #15
     540:	4001      	ands	r1, r0
    case HARDSER_PARITY_NONE:
    default:
      return SERCOM_NO_PARITY;

    case HARDSER_PARITY_EVEN:
      return SERCOM_EVEN_PARITY;
     542:	2000      	movs	r0, #0
  switch(config & HARDSER_PARITY_MASK)
     544:	2901      	cmp	r1, #1
     546:	d003      	beq.n	550 <_ZN4Uart13extractParityEt+0x12>
      return SERCOM_NO_PARITY;
     548:	3902      	subs	r1, #2
     54a:	1e48      	subs	r0, r1, #1
     54c:	4181      	sbcs	r1, r0
     54e:	1c48      	adds	r0, r1, #1

    case HARDSER_PARITY_ODD:
      return SERCOM_ODD_PARITY;
  }
}
     550:	4770      	bx	lr
	...

00000554 <_ZN4Uart5beginEmt>:
  pinPeripheral(uc_pinRX, g_APinDescription[uc_pinRX].ulPinType);
     554:	0003      	movs	r3, r0
{
     556:	b5f0      	push	{r4, r5, r6, r7, lr}
  pinPeripheral(uc_pinRX, g_APinDescription[uc_pinRX].ulPinType);
     558:	2618      	movs	r6, #24
{
     55a:	b085      	sub	sp, #20
     55c:	9103      	str	r1, [sp, #12]
  pinPeripheral(uc_pinRX, g_APinDescription[uc_pinRX].ulPinType);
     55e:	33a4      	adds	r3, #164	; 0xa4
{
     560:	0004      	movs	r4, r0
  pinPeripheral(uc_pinRX, g_APinDescription[uc_pinRX].ulPinType);
     562:	7818      	ldrb	r0, [r3, #0]
     564:	0033      	movs	r3, r6
     566:	2108      	movs	r1, #8
     568:	4343      	muls	r3, r0
     56a:	4d33      	ldr	r5, [pc, #204]	; (638 <_ZN4Uart5beginEmt+0xe4>)
{
     56c:	0017      	movs	r7, r2
  pinPeripheral(uc_pinRX, g_APinDescription[uc_pinRX].ulPinType);
     56e:	18eb      	adds	r3, r5, r3
     570:	5659      	ldrsb	r1, [r3, r1]
     572:	f000 fa99 	bl	aa8 <pinPeripheral>
  pinPeripheral(uc_pinTX, g_APinDescription[uc_pinTX].ulPinType);
     576:	0023      	movs	r3, r4
     578:	33a5      	adds	r3, #165	; 0xa5
     57a:	7818      	ldrb	r0, [r3, #0]
     57c:	0033      	movs	r3, r6
     57e:	2108      	movs	r1, #8
     580:	4343      	muls	r3, r0
     582:	18eb      	adds	r3, r5, r3
     584:	5659      	ldrsb	r1, [r3, r1]
     586:	f000 fa8f 	bl	aa8 <pinPeripheral>
  if (uc_padTX == UART_TX_RTS_CTS_PAD_0_2_3) { 
     58a:	0023      	movs	r3, r4
     58c:	33a7      	adds	r3, #167	; 0xa7
     58e:	781b      	ldrb	r3, [r3, #0]
     590:	2b02      	cmp	r3, #2
     592:	d10a      	bne.n	5aa <_ZN4Uart5beginEmt+0x56>
    if (uc_pinCTS != NO_CTS_PIN) {
     594:	0023      	movs	r3, r4
     596:	33b8      	adds	r3, #184	; 0xb8
     598:	7818      	ldrb	r0, [r3, #0]
     59a:	28ff      	cmp	r0, #255	; 0xff
     59c:	d005      	beq.n	5aa <_ZN4Uart5beginEmt+0x56>
      pinPeripheral(uc_pinCTS, g_APinDescription[uc_pinCTS].ulPinType);
     59e:	2108      	movs	r1, #8
     5a0:	4346      	muls	r6, r0
     5a2:	19ae      	adds	r6, r5, r6
     5a4:	5671      	ldrsb	r1, [r6, r1]
     5a6:	f000 fa7f 	bl	aa8 <pinPeripheral>
  if (uc_pinRTS != NO_RTS_PIN) {
     5aa:	0026      	movs	r6, r4
     5ac:	36a8      	adds	r6, #168	; 0xa8
     5ae:	7830      	ldrb	r0, [r6, #0]
     5b0:	28ff      	cmp	r0, #255	; 0xff
     5b2:	d019      	beq.n	5e8 <_ZN4Uart5beginEmt+0x94>
    pinMode(uc_pinRTS, OUTPUT);
     5b4:	2101      	movs	r1, #1
     5b6:	f000 fa2b 	bl	a10 <pinMode>
    EPortType rtsPort = g_APinDescription[uc_pinRTS].ulPort;
     5ba:	2218      	movs	r2, #24
    pul_outsetRTS = &PORT->Group[rtsPort].OUTSET.reg;
     5bc:	0021      	movs	r1, r4
    EPortType rtsPort = g_APinDescription[uc_pinRTS].ulPort;
     5be:	7833      	ldrb	r3, [r6, #0]
    pul_outsetRTS = &PORT->Group[rtsPort].OUTSET.reg;
     5c0:	481e      	ldr	r0, [pc, #120]	; (63c <_ZN4Uart5beginEmt+0xe8>)
    EPortType rtsPort = g_APinDescription[uc_pinRTS].ulPort;
     5c2:	435a      	muls	r2, r3
    pul_outsetRTS = &PORT->Group[rtsPort].OUTSET.reg;
     5c4:	56ab      	ldrsb	r3, [r5, r2]
     5c6:	31ac      	adds	r1, #172	; 0xac
     5c8:	01db      	lsls	r3, r3, #7
     5ca:	1818      	adds	r0, r3, r0
     5cc:	6008      	str	r0, [r1, #0]
    pul_outclrRTS = &PORT->Group[rtsPort].OUTCLR.reg;
     5ce:	491c      	ldr	r1, [pc, #112]	; (640 <_ZN4Uart5beginEmt+0xec>)
    ul_pinMaskRTS = (1ul << g_APinDescription[uc_pinRTS].ulPin);
     5d0:	18ad      	adds	r5, r5, r2
    pul_outclrRTS = &PORT->Group[rtsPort].OUTCLR.reg;
     5d2:	185b      	adds	r3, r3, r1
     5d4:	0021      	movs	r1, r4
    ul_pinMaskRTS = (1ul << g_APinDescription[uc_pinRTS].ulPin);
     5d6:	2201      	movs	r2, #1
    pul_outclrRTS = &PORT->Group[rtsPort].OUTCLR.reg;
     5d8:	31b0      	adds	r1, #176	; 0xb0
     5da:	600b      	str	r3, [r1, #0]
    ul_pinMaskRTS = (1ul << g_APinDescription[uc_pinRTS].ulPin);
     5dc:	6869      	ldr	r1, [r5, #4]
     5de:	408a      	lsls	r2, r1
     5e0:	0021      	movs	r1, r4
     5e2:	31b4      	adds	r1, #180	; 0xb4
     5e4:	600a      	str	r2, [r1, #0]
    *pul_outclrRTS = ul_pinMaskRTS;
     5e6:	601a      	str	r2, [r3, #0]
  sercom->initUART(UART_INT_CLOCK, SAMPLE_RATE_x16, baudrate);
     5e8:	2201      	movs	r2, #1
     5ea:	9b03      	ldr	r3, [sp, #12]
     5ec:	0011      	movs	r1, r2
     5ee:	6920      	ldr	r0, [r4, #16]
     5f0:	f000 fe36 	bl	1260 <_ZN6SERCOM8initUARTE14SercomUartMode20SercomUartSampleRatem>
  sercom->initFrame(extractCharSize(config), LSB_FIRST, extractParity(config), extractNbStopBit(config));
     5f4:	0039      	movs	r1, r7
     5f6:	0020      	movs	r0, r4
     5f8:	f7ff ff8d 	bl	516 <_ZN4Uart15extractCharSizeEt>
     5fc:	0039      	movs	r1, r7
     5fe:	0005      	movs	r5, r0
     600:	0020      	movs	r0, r4
     602:	f7ff ff9c 	bl	53e <_ZN4Uart13extractParityEt>
     606:	0039      	movs	r1, r7
     608:	0006      	movs	r6, r0
     60a:	0020      	movs	r0, r4
     60c:	f7ff ff7d 	bl	50a <_ZN4Uart16extractNbStopBitEt>
     610:	0033      	movs	r3, r6
     612:	9000      	str	r0, [sp, #0]
     614:	0029      	movs	r1, r5
     616:	6920      	ldr	r0, [r4, #16]
     618:	2201      	movs	r2, #1
     61a:	f000 fc97 	bl	f4c <_ZN6SERCOM9initFrameE18SercomUartCharSize15SercomDataOrder16SercomParityMode19SercomNumberStopBit>
  sercom->initPads(uc_padTX, uc_padRX);
     61e:	0023      	movs	r3, r4
     620:	33a6      	adds	r3, #166	; 0xa6
     622:	781a      	ldrb	r2, [r3, #0]
     624:	7859      	ldrb	r1, [r3, #1]
     626:	6920      	ldr	r0, [r4, #16]
     628:	f000 fcaa 	bl	f80 <_ZN6SERCOM8initPadsE15SercomUartTXPad11SercomRXPad>
  sercom->enableUART();
     62c:	6920      	ldr	r0, [r4, #16]
     62e:	f000 fcc4 	bl	fba <_ZN6SERCOM10enableUARTEv>
}
     632:	b005      	add	sp, #20
     634:	bdf0      	pop	{r4, r5, r6, r7, pc}
     636:	46c0      	nop			; (mov r8, r8)
     638:	0000153c 	.word	0x0000153c
     63c:	41004418 	.word	0x41004418
     640:	41004414 	.word	0x41004414

00000644 <_ZN11RingBufferNILi64EEC1Ev>:
RingBufferN<N>::RingBufferN( void )
     644:	b510      	push	{r4, lr}
    memset( _aucBuffer, 0, N ) ;
     646:	2240      	movs	r2, #64	; 0x40
     648:	2100      	movs	r1, #0
RingBufferN<N>::RingBufferN( void )
     64a:	0004      	movs	r4, r0
    memset( _aucBuffer, 0, N ) ;
     64c:	f000 ff2e 	bl	14ac <memset>
  _iHead = 0;
     650:	2300      	movs	r3, #0
}
     652:	0020      	movs	r0, r4
  _iHead = 0;
     654:	6423      	str	r3, [r4, #64]	; 0x40
  _iTail = 0;
     656:	6463      	str	r3, [r4, #68]	; 0x44
}
     658:	bd10      	pop	{r4, pc}
	...

0000065c <_ZN4UartC1EP6SERCOMhh11SercomRXPad15SercomUartTXPad>:
Uart::Uart(SERCOM *_s, uint8_t _pinRX, uint8_t _pinTX, SercomRXPad _padRX, SercomUartTXPad _padTX) :
     65c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
     65e:	001d      	movs	r5, r3
     660:	ab08      	add	r3, sp, #32
     662:	781b      	ldrb	r3, [r3, #0]
     664:	0004      	movs	r4, r0
     666:	9300      	str	r3, [sp, #0]
     668:	ab09      	add	r3, sp, #36	; 0x24
     66a:	781b      	ldrb	r3, [r3, #0]
     66c:	0016      	movs	r6, r2
     66e:	9301      	str	r3, [sp, #4]
    Print() : write_error(0) {}
     670:	2300      	movs	r3, #0
     672:	6043      	str	r3, [r0, #4]
  public:
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;

    Stream() {_timeout=1000;}
     674:	23fa      	movs	r3, #250	; 0xfa
     676:	009b      	lsls	r3, r3, #2
     678:	6083      	str	r3, [r0, #8]
Uart::Uart(SERCOM *_s, uint8_t _pinRX, uint8_t _pinTX, SercomRXPad _padRX, SercomUartTXPad _padTX, uint8_t _pinRTS, uint8_t _pinCTS)
     67a:	4b0e      	ldr	r3, [pc, #56]	; (6b4 <_ZN4UartC1EP6SERCOMhh11SercomRXPad15SercomUartTXPad+0x58>)
Uart::Uart(SERCOM *_s, uint8_t _pinRX, uint8_t _pinTX, SercomRXPad _padRX, SercomUartTXPad _padTX) :
     67c:	000f      	movs	r7, r1
Uart::Uart(SERCOM *_s, uint8_t _pinRX, uint8_t _pinTX, SercomRXPad _padRX, SercomUartTXPad _padTX, uint8_t _pinRTS, uint8_t _pinCTS)
     67e:	3308      	adds	r3, #8
     680:	6003      	str	r3, [r0, #0]
     682:	3014      	adds	r0, #20
     684:	f7ff ffde 	bl	644 <_ZN11RingBufferNILi64EEC1Ev>
     688:	0020      	movs	r0, r4
     68a:	305c      	adds	r0, #92	; 0x5c
     68c:	f7ff ffda 	bl	644 <_ZN11RingBufferNILi64EEC1Ev>
  uc_padRX = _padRX ;
     690:	466a      	mov	r2, sp
  uc_pinRX = _pinRX;
     692:	0023      	movs	r3, r4
  uc_padRX = _padRX ;
     694:	7812      	ldrb	r2, [r2, #0]
  uc_pinRX = _pinRX;
     696:	33a4      	adds	r3, #164	; 0xa4
  sercom = _s;
     698:	6127      	str	r7, [r4, #16]
  uc_padRX = _padRX ;
     69a:	709a      	strb	r2, [r3, #2]
  uc_padTX = _padTX;
     69c:	466a      	mov	r2, sp
     69e:	7912      	ldrb	r2, [r2, #4]
  uc_pinRX = _pinRX;
     6a0:	701e      	strb	r6, [r3, #0]
  uc_padTX = _padTX;
     6a2:	70da      	strb	r2, [r3, #3]
  uc_pinRTS = _pinRTS;
     6a4:	0022      	movs	r2, r4
  uc_pinTX = _pinTX;
     6a6:	705d      	strb	r5, [r3, #1]
  uc_pinRTS = _pinRTS;
     6a8:	23ff      	movs	r3, #255	; 0xff
     6aa:	32a8      	adds	r2, #168	; 0xa8
}
     6ac:	0020      	movs	r0, r4
  uc_pinRTS = _pinRTS;
     6ae:	7013      	strb	r3, [r2, #0]
  uc_pinCTS = _pinCTS;
     6b0:	7413      	strb	r3, [r2, #16]
}
     6b2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
     6b4:	000014e4 	.word	0x000014e4

000006b8 <_ZN11RingBufferNILi64EE9availableEv>:
  int delta = _iHead - _iTail;
     6b8:	6c03      	ldr	r3, [r0, #64]	; 0x40
     6ba:	6c40      	ldr	r0, [r0, #68]	; 0x44
     6bc:	1a18      	subs	r0, r3, r0
  if(delta < 0)
     6be:	d500      	bpl.n	6c2 <_ZN11RingBufferNILi64EE9availableEv+0xa>
    return N + delta;
     6c0:	3040      	adds	r0, #64	; 0x40
}
     6c2:	4770      	bx	lr

000006c4 <_ZN4Uart5flushEv>:
{
     6c4:	b510      	push	{r4, lr}
     6c6:	0004      	movs	r4, r0
  while(txBuffer.available()); // wait until TX buffer is empty
     6c8:	0020      	movs	r0, r4
     6ca:	305c      	adds	r0, #92	; 0x5c
     6cc:	f7ff fff4 	bl	6b8 <_ZN11RingBufferNILi64EE9availableEv>
     6d0:	2800      	cmp	r0, #0
     6d2:	d1f9      	bne.n	6c8 <_ZN4Uart5flushEv+0x4>
  sercom->flushUART();
     6d4:	6920      	ldr	r0, [r4, #16]
     6d6:	f000 fc79 	bl	fcc <_ZN6SERCOM9flushUARTEv>
}
     6da:	bd10      	pop	{r4, pc}

000006dc <_ZN4Uart9availableEv>:
{
     6dc:	b510      	push	{r4, lr}
  return rxBuffer.available();
     6de:	3014      	adds	r0, #20
     6e0:	f7ff ffea 	bl	6b8 <_ZN11RingBufferNILi64EE9availableEv>
}
     6e4:	bd10      	pop	{r4, pc}

000006e6 <_ZN11RingBufferNILi64EE17availableForStoreEv>:
  if (_iHead >= _iTail)
     6e6:	6c02      	ldr	r2, [r0, #64]	; 0x40
     6e8:	6c43      	ldr	r3, [r0, #68]	; 0x44
     6ea:	429a      	cmp	r2, r3
     6ec:	db04      	blt.n	6f8 <_ZN11RingBufferNILi64EE17availableForStoreEv+0x12>
    return N - 1 - _iHead + _iTail;
     6ee:	6c03      	ldr	r3, [r0, #64]	; 0x40
     6f0:	6c40      	ldr	r0, [r0, #68]	; 0x44
     6f2:	1ac0      	subs	r0, r0, r3
     6f4:	303f      	adds	r0, #63	; 0x3f
}
     6f6:	4770      	bx	lr
    return _iTail - _iHead - 1;
     6f8:	6c43      	ldr	r3, [r0, #68]	; 0x44
     6fa:	6c00      	ldr	r0, [r0, #64]	; 0x40
     6fc:	1a18      	subs	r0, r3, r0
     6fe:	3801      	subs	r0, #1
     700:	e7f9      	b.n	6f6 <_ZN11RingBufferNILi64EE17availableForStoreEv+0x10>

00000702 <_ZN4Uart17availableForWriteEv>:
{
     702:	b510      	push	{r4, lr}
  return txBuffer.availableForStore();
     704:	305c      	adds	r0, #92	; 0x5c
     706:	f7ff ffee 	bl	6e6 <_ZN11RingBufferNILi64EE17availableForStoreEv>
}
     70a:	bd10      	pop	{r4, pc}

0000070c <_ZN4Uart10IrqHandlerEv>:
{
     70c:	b570      	push	{r4, r5, r6, lr}
     70e:	0004      	movs	r4, r0
  if (sercom->availableDataUART()) {
     710:	6900      	ldr	r0, [r0, #16]
     712:	f000 fc67 	bl	fe4 <_ZN6SERCOM17availableDataUARTEv>
     716:	2800      	cmp	r0, #0
     718:	d01f      	beq.n	75a <_ZN4Uart10IrqHandlerEv+0x4e>
    rxBuffer.store_char(sercom->readDataUART());
     71a:	6920      	ldr	r0, [r4, #16]
     71c:	f000 fc8b 	bl	1036 <_ZN6SERCOM12readDataUARTEv>
}

template <int N>
int RingBufferN<N>::nextIndex(int index)
{
  return (uint32_t)(index + 1) % N;
     720:	223f      	movs	r2, #63	; 0x3f
  int i = nextIndex(_iHead);
     722:	6d63      	ldr	r3, [r4, #84]	; 0x54
  return (uint32_t)(index + 1) % N;
     724:	3301      	adds	r3, #1
     726:	4013      	ands	r3, r2
  if ( i != _iTail )
     728:	6da2      	ldr	r2, [r4, #88]	; 0x58
     72a:	4293      	cmp	r3, r2
     72c:	d003      	beq.n	736 <_ZN4Uart10IrqHandlerEv+0x2a>
    _aucBuffer[_iHead] = c ;
     72e:	6d62      	ldr	r2, [r4, #84]	; 0x54
     730:	18a2      	adds	r2, r4, r2
     732:	7510      	strb	r0, [r2, #20]
    _iHead = i ;
     734:	6563      	str	r3, [r4, #84]	; 0x54
    if (uc_pinRTS != NO_RTS_PIN) {
     736:	0023      	movs	r3, r4
     738:	33a8      	adds	r3, #168	; 0xa8
     73a:	781b      	ldrb	r3, [r3, #0]
     73c:	2bff      	cmp	r3, #255	; 0xff
     73e:	d00c      	beq.n	75a <_ZN4Uart10IrqHandlerEv+0x4e>
    rxBuffer.store_char(sercom->readDataUART());
     740:	0020      	movs	r0, r4
     742:	3014      	adds	r0, #20
      if (rxBuffer.availableForStore() < RTS_RX_THRESHOLD) {
     744:	f7ff ffcf 	bl	6e6 <_ZN11RingBufferNILi64EE17availableForStoreEv>
     748:	2809      	cmp	r0, #9
     74a:	dc06      	bgt.n	75a <_ZN4Uart10IrqHandlerEv+0x4e>
        *pul_outsetRTS = ul_pinMaskRTS;
     74c:	0023      	movs	r3, r4
     74e:	0022      	movs	r2, r4
     750:	33ac      	adds	r3, #172	; 0xac
     752:	32b4      	adds	r2, #180	; 0xb4
     754:	681b      	ldr	r3, [r3, #0]
     756:	6812      	ldr	r2, [r2, #0]
     758:	601a      	str	r2, [r3, #0]
  if (sercom->isDataRegisterEmptyUART()) {
     75a:	6920      	ldr	r0, [r4, #16]
     75c:	f000 fc66 	bl	102c <_ZN6SERCOM23isDataRegisterEmptyUARTEv>
     760:	2800      	cmp	r0, #0
     762:	d019      	beq.n	798 <_ZN4Uart10IrqHandlerEv+0x8c>
    if (txBuffer.available()) {
     764:	0025      	movs	r5, r4
     766:	355c      	adds	r5, #92	; 0x5c
     768:	0028      	movs	r0, r5
     76a:	f7ff ffa5 	bl	6b8 <_ZN11RingBufferNILi64EE9availableEv>
     76e:	2800      	cmp	r0, #0
     770:	d021      	beq.n	7b6 <_ZN4Uart10IrqHandlerEv+0xaa>
  if(_iTail == _iHead)
     772:	0022      	movs	r2, r4
     774:	0023      	movs	r3, r4
     776:	32a0      	adds	r2, #160	; 0xa0
     778:	339c      	adds	r3, #156	; 0x9c
     77a:	6811      	ldr	r1, [r2, #0]
     77c:	681b      	ldr	r3, [r3, #0]
     77e:	4299      	cmp	r1, r3
     780:	d016      	beq.n	7b0 <_ZN4Uart10IrqHandlerEv+0xa4>
  return (uint32_t)(index + 1) % N;
     782:	203f      	movs	r0, #63	; 0x3f
  uint8_t value = _aucBuffer[_iTail];
     784:	6813      	ldr	r3, [r2, #0]
     786:	5ce9      	ldrb	r1, [r5, r3]
  _iTail = nextIndex(_iTail);
     788:	6813      	ldr	r3, [r2, #0]
  return (uint32_t)(index + 1) % N;
     78a:	3301      	adds	r3, #1
     78c:	4003      	ands	r3, r0
  _iTail = nextIndex(_iTail);
     78e:	6013      	str	r3, [r2, #0]
      sercom->writeDataUART(data);
     790:	b2c9      	uxtb	r1, r1
     792:	6920      	ldr	r0, [r4, #16]
     794:	f000 fc53 	bl	103e <_ZN6SERCOM13writeDataUARTEh>
  if (sercom->isUARTError()) {
     798:	6920      	ldr	r0, [r4, #16]
     79a:	f000 fc28 	bl	fee <_ZN6SERCOM11isUARTErrorEv>
     79e:	2800      	cmp	r0, #0
     7a0:	d005      	beq.n	7ae <_ZN4Uart10IrqHandlerEv+0xa2>
    sercom->acknowledgeUARTError();
     7a2:	6920      	ldr	r0, [r4, #16]
     7a4:	f000 fc2b 	bl	ffe <_ZN6SERCOM20acknowledgeUARTErrorEv>
    sercom->clearStatusUART();
     7a8:	6920      	ldr	r0, [r4, #16]
     7aa:	f000 fc17 	bl	fdc <_ZN6SERCOM15clearStatusUARTEv>
}
     7ae:	bd70      	pop	{r4, r5, r6, pc}
    return -1;
     7b0:	2101      	movs	r1, #1
     7b2:	4249      	negs	r1, r1
     7b4:	e7ec      	b.n	790 <_ZN4Uart10IrqHandlerEv+0x84>
      sercom->disableDataRegisterEmptyInterruptUART();
     7b6:	6920      	ldr	r0, [r4, #16]
     7b8:	f000 fc4d 	bl	1056 <_ZN6SERCOM37disableDataRegisterEmptyInterruptUARTEv>
     7bc:	e7ec      	b.n	798 <_ZN4Uart10IrqHandlerEv+0x8c>
	...

000007c0 <_ZN4Uart5writeEh>:
{
     7c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     7c2:	0004      	movs	r4, r0
  if (sercom->isDataRegisterEmptyUART() && txBuffer.available() == 0) {
     7c4:	6900      	ldr	r0, [r0, #16]
{
     7c6:	000d      	movs	r5, r1
  if (sercom->isDataRegisterEmptyUART() && txBuffer.available() == 0) {
     7c8:	f000 fc30 	bl	102c <_ZN6SERCOM23isDataRegisterEmptyUARTEv>
     7cc:	2800      	cmp	r0, #0
     7ce:	d126      	bne.n	81e <_ZN4Uart5writeEh+0x5e>
  return (uint32_t)(index + 1) % N;
     7d0:	263f      	movs	r6, #63	; 0x3f
      uint8_t interruptsEnabled = ((__get_PRIMASK() & 0x1) == 0);
     7d2:	2701      	movs	r7, #1
}

template <int N>
bool RingBufferN<N>::isFull()
{
  return (nextIndex(_iHead) == _iTail);
     7d4:	0022      	movs	r2, r4
     7d6:	0021      	movs	r1, r4
     7d8:	329c      	adds	r2, #156	; 0x9c
     7da:	6813      	ldr	r3, [r2, #0]
     7dc:	31a0      	adds	r1, #160	; 0xa0
     7de:	6808      	ldr	r0, [r1, #0]
  return (uint32_t)(index + 1) % N;
     7e0:	3301      	adds	r3, #1
     7e2:	4033      	ands	r3, r6
    while(txBuffer.isFull()) {
     7e4:	4283      	cmp	r3, r0
     7e6:	d12e      	bne.n	846 <_ZN4Uart5writeEh+0x86>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
     7e8:	f3ef 8310 	mrs	r3, PRIMASK
      if (interruptsEnabled) {
     7ec:	423b      	tst	r3, r7
     7ee:	d10d      	bne.n	80c <_ZN4Uart5writeEh+0x4c>
        uint32_t exceptionNumber = (SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk);
     7f0:	4b1d      	ldr	r3, [pc, #116]	; (868 <_ZN4Uart5writeEh+0xa8>)
     7f2:	685b      	ldr	r3, [r3, #4]
     7f4:	05db      	lsls	r3, r3, #23
     7f6:	0ddb      	lsrs	r3, r3, #23
        if (exceptionNumber == 0 ||
     7f8:	d0ec      	beq.n	7d4 <_ZN4Uart5writeEh+0x14>
              NVIC_GetPriority((IRQn_Type)(exceptionNumber - 16)) > SERCOM_NVIC_PRIORITY) {
     7fa:	3b10      	subs	r3, #16
     7fc:	b25b      	sxtb	r3, r3
  if ((int32_t)(IRQn) >= 0)
     7fe:	2b00      	cmp	r3, #0
     800:	db18      	blt.n	834 <_ZN4Uart5writeEh+0x74>
    return((uint32_t)(((NVIC->IP[ _IP_IDX(IRQn)] >> _BIT_SHIFT(IRQn) ) & (uint32_t)0xFFUL) >> (8U - __NVIC_PRIO_BITS)));
     802:	089b      	lsrs	r3, r3, #2
     804:	33c0      	adds	r3, #192	; 0xc0
     806:	4a19      	ldr	r2, [pc, #100]	; (86c <_ZN4Uart5writeEh+0xac>)
     808:	009b      	lsls	r3, r3, #2
     80a:	589b      	ldr	r3, [r3, r2]
      if (sercom->isDataRegisterEmptyUART()) {
     80c:	6920      	ldr	r0, [r4, #16]
     80e:	f000 fc0d 	bl	102c <_ZN6SERCOM23isDataRegisterEmptyUARTEv>
     812:	2800      	cmp	r0, #0
     814:	d0de      	beq.n	7d4 <_ZN4Uart5writeEh+0x14>
        IrqHandler();
     816:	0020      	movs	r0, r4
     818:	f7ff ff78 	bl	70c <_ZN4Uart10IrqHandlerEv>
     81c:	e7da      	b.n	7d4 <_ZN4Uart5writeEh+0x14>
  if (sercom->isDataRegisterEmptyUART() && txBuffer.available() == 0) {
     81e:	0020      	movs	r0, r4
     820:	305c      	adds	r0, #92	; 0x5c
     822:	f7ff ff49 	bl	6b8 <_ZN11RingBufferNILi64EE9availableEv>
     826:	2800      	cmp	r0, #0
     828:	d1d2      	bne.n	7d0 <_ZN4Uart5writeEh+0x10>
    sercom->writeDataUART(data);
     82a:	0029      	movs	r1, r5
     82c:	6920      	ldr	r0, [r4, #16]
     82e:	f000 fc06 	bl	103e <_ZN6SERCOM13writeDataUARTEh>
  return 1;
     832:	e016      	b.n	862 <_ZN4Uart5writeEh+0xa2>
    return((uint32_t)(((SCB->SHP[_SHP_IDX(IRQn)] >> _BIT_SHIFT(IRQn) ) & (uint32_t)0xFFUL) >> (8U - __NVIC_PRIO_BITS)));
     834:	220f      	movs	r2, #15
     836:	4013      	ands	r3, r2
     838:	3b08      	subs	r3, #8
     83a:	089b      	lsrs	r3, r3, #2
     83c:	4a0c      	ldr	r2, [pc, #48]	; (870 <_ZN4Uart5writeEh+0xb0>)
     83e:	009b      	lsls	r3, r3, #2
     840:	189b      	adds	r3, r3, r2
     842:	681b      	ldr	r3, [r3, #0]
     844:	e7e2      	b.n	80c <_ZN4Uart5writeEh+0x4c>
  int i = nextIndex(_iHead);
     846:	6813      	ldr	r3, [r2, #0]
  return (uint32_t)(index + 1) % N;
     848:	3301      	adds	r3, #1
     84a:	401e      	ands	r6, r3
  if ( i != _iTail )
     84c:	680b      	ldr	r3, [r1, #0]
     84e:	429e      	cmp	r6, r3
     850:	d004      	beq.n	85c <_ZN4Uart5writeEh+0x9c>
    _aucBuffer[_iHead] = c ;
     852:	0021      	movs	r1, r4
     854:	6813      	ldr	r3, [r2, #0]
     856:	315c      	adds	r1, #92	; 0x5c
     858:	54cd      	strb	r5, [r1, r3]
    _iHead = i ;
     85a:	6016      	str	r6, [r2, #0]
    sercom->enableDataRegisterEmptyInterruptUART();
     85c:	6920      	ldr	r0, [r4, #16]
     85e:	f000 fbf6 	bl	104e <_ZN6SERCOM36enableDataRegisterEmptyInterruptUARTEv>
}
     862:	2001      	movs	r0, #1
     864:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     866:	46c0      	nop			; (mov r8, r8)
     868:	e000ed00 	.word	0xe000ed00
     86c:	e000e100 	.word	0xe000e100
     870:	e000ed1c 	.word	0xe000ed1c

00000874 <_ZN4Uart4readEv>:
  if(_iTail == _iHead)
     874:	6d82      	ldr	r2, [r0, #88]	; 0x58
     876:	6d43      	ldr	r3, [r0, #84]	; 0x54
{
     878:	b570      	push	{r4, r5, r6, lr}
     87a:	0004      	movs	r4, r0
     87c:	429a      	cmp	r2, r3
     87e:	d01a      	beq.n	8b6 <_ZN4Uart4readEv+0x42>
  return (uint32_t)(index + 1) % N;
     880:	223f      	movs	r2, #63	; 0x3f
  uint8_t value = _aucBuffer[_iTail];
     882:	6d83      	ldr	r3, [r0, #88]	; 0x58
     884:	18c3      	adds	r3, r0, r3
     886:	7d1d      	ldrb	r5, [r3, #20]
  _iTail = nextIndex(_iTail);
     888:	6d83      	ldr	r3, [r0, #88]	; 0x58
  return (uint32_t)(index + 1) % N;
     88a:	3301      	adds	r3, #1
     88c:	4013      	ands	r3, r2
  _iTail = nextIndex(_iTail);
     88e:	6583      	str	r3, [r0, #88]	; 0x58
  if (uc_pinRTS != NO_RTS_PIN) {
     890:	0023      	movs	r3, r4
     892:	33a8      	adds	r3, #168	; 0xa8
     894:	781b      	ldrb	r3, [r3, #0]
     896:	2bff      	cmp	r3, #255	; 0xff
     898:	d00b      	beq.n	8b2 <_ZN4Uart4readEv+0x3e>
  int c = rxBuffer.read_char();
     89a:	0020      	movs	r0, r4
     89c:	3014      	adds	r0, #20
    if (rxBuffer.availableForStore() > RTS_RX_THRESHOLD) {
     89e:	f7ff ff22 	bl	6e6 <_ZN11RingBufferNILi64EE17availableForStoreEv>
     8a2:	280a      	cmp	r0, #10
     8a4:	dd05      	ble.n	8b2 <_ZN4Uart4readEv+0x3e>
      *pul_outclrRTS = ul_pinMaskRTS;
     8a6:	0023      	movs	r3, r4
     8a8:	34b4      	adds	r4, #180	; 0xb4
     8aa:	33b0      	adds	r3, #176	; 0xb0
     8ac:	681b      	ldr	r3, [r3, #0]
     8ae:	6822      	ldr	r2, [r4, #0]
     8b0:	601a      	str	r2, [r3, #0]
}
     8b2:	0028      	movs	r0, r5
     8b4:	bd70      	pop	{r4, r5, r6, pc}
    return -1;
     8b6:	2501      	movs	r5, #1
     8b8:	426d      	negs	r5, r5
     8ba:	e7e9      	b.n	890 <_ZN4Uart4readEv+0x1c>

000008bc <init>:
 *   - During reset, all PORT lines are configured as inputs with input buffers, output buffers and pull disabled.
 */
void init( void )
{
  // Set Systick to 1ms interval, common to all Cortex-M variants
  if ( SysTick_Config( SystemCoreClock / 1000 ) )
     8bc:	21fa      	movs	r1, #250	; 0xfa
     8be:	4b31      	ldr	r3, [pc, #196]	; (984 <init+0xc8>)
{
     8c0:	b510      	push	{r4, lr}
  if ( SysTick_Config( SystemCoreClock / 1000 ) )
     8c2:	6818      	ldr	r0, [r3, #0]
     8c4:	0089      	lsls	r1, r1, #2
     8c6:	f000 fd41 	bl	134c <__udivsi3>
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
     8ca:	4b2f      	ldr	r3, [pc, #188]	; (988 <init+0xcc>)
     8cc:	3801      	subs	r0, #1
     8ce:	4298      	cmp	r0, r3
     8d0:	d856      	bhi.n	980 <init+0xc4>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
     8d2:	492e      	ldr	r1, [pc, #184]	; (98c <init+0xd0>)
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
     8d4:	4a2e      	ldr	r2, [pc, #184]	; (990 <init+0xd4>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
     8d6:	6048      	str	r0, [r1, #4]
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
     8d8:	20c0      	movs	r0, #192	; 0xc0
     8da:	6a13      	ldr	r3, [r2, #32]
     8dc:	0600      	lsls	r0, r0, #24
     8de:	021b      	lsls	r3, r3, #8
     8e0:	0a1b      	lsrs	r3, r3, #8
     8e2:	4303      	orrs	r3, r0
     8e4:	6213      	str	r3, [r2, #32]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
     8e6:	2400      	movs	r4, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
     8e8:	2307      	movs	r3, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
     8ea:	608c      	str	r4, [r1, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
     8ec:	600b      	str	r3, [r1, #0]
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
     8ee:	2180      	movs	r1, #128	; 0x80
     8f0:	6a13      	ldr	r3, [r2, #32]
     8f2:	0609      	lsls	r1, r1, #24
     8f4:	021b      	lsls	r3, r3, #8
     8f6:	0a1b      	lsrs	r3, r3, #8
     8f8:	430b      	orrs	r3, r1
     8fa:	6213      	str	r3, [r2, #32]
//
//  // Clock EIC for I/O interrupts
//  PM->APBAMASK.reg |= PM_APBAMASK_EIC ;

  // Clock SERCOM for Serial
  PM->APBCMASK.reg |= PM_APBCMASK_SERCOM0 | PM_APBCMASK_SERCOM1 | PM_APBCMASK_SERCOM2 | PM_APBCMASK_SERCOM3 | PM_APBCMASK_SERCOM4 | PM_APBCMASK_SERCOM5 ;
     8fc:	22fc      	movs	r2, #252	; 0xfc
     8fe:	4b25      	ldr	r3, [pc, #148]	; (994 <init+0xd8>)
     900:	6a19      	ldr	r1, [r3, #32]
     902:	430a      	orrs	r2, r1
     904:	621a      	str	r2, [r3, #32]

  // Clock TC/TCC for Pulse and Analog
#ifndef SAMD20
  PM->APBCMASK.reg |= PM_APBCMASK_TCC0 | PM_APBCMASK_TCC1 | PM_APBCMASK_TCC2 | PM_APBCMASK_TC3 | PM_APBCMASK_TC4 | PM_APBCMASK_TC5 ;
#else
  PM->APBCMASK.reg |= PM_APBCMASK_TC0 | PM_APBCMASK_TC1 | PM_APBCMASK_TC2 | PM_APBCMASK_TC3 | PM_APBCMASK_TC4 | PM_APBCMASK_TC5 ;
     906:	22fc      	movs	r2, #252	; 0xfc
     908:	6a19      	ldr	r1, [r3, #32]
     90a:	0192      	lsls	r2, r2, #6
     90c:	430a      	orrs	r2, r1
     90e:	621a      	str	r2, [r3, #32]
#endif /* SAMD20 */

  // Clock ADC/DAC for Analog
  PM->APBCMASK.reg |= PM_APBCMASK_ADC | PM_APBCMASK_DAC ;
     910:	22a0      	movs	r2, #160	; 0xa0
     912:	6a19      	ldr	r1, [r3, #32]
     914:	02d2      	lsls	r2, r2, #11
     916:	430a      	orrs	r2, r1
     918:	621a      	str	r2, [r3, #32]

  // Setup all pins (digital and analog) in INPUT mode (default is nothing)
  for (uint32_t ul = 0 ; ul < NUM_DIGITAL_PINS ; ul++ )
  {
    pinMode( ul, INPUT ) ;
     91a:	0020      	movs	r0, r4
     91c:	2100      	movs	r1, #0
  for (uint32_t ul = 0 ; ul < NUM_DIGITAL_PINS ; ul++ )
     91e:	3401      	adds	r4, #1
    pinMode( ul, INPUT ) ;
     920:	f000 f876 	bl	a10 <pinMode>
  for (uint32_t ul = 0 ; ul < NUM_DIGITAL_PINS ; ul++ )
     924:	2c10      	cmp	r4, #16
     926:	d1f8      	bne.n	91a <init+0x5e>
  }

  // Initialize Analog Controller
  // Setting clock
  while(GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY);
     928:	4b1b      	ldr	r3, [pc, #108]	; (998 <init+0xdc>)
     92a:	001c      	movs	r4, r3
     92c:	785a      	ldrb	r2, [r3, #1]
     92e:	b252      	sxtb	r2, r2
     930:	2a00      	cmp	r2, #0
     932:	dbfb      	blt.n	92c <init+0x70>

  GCLK->CLKCTRL.reg = GCLK_CLKCTRL_ID( GCM_ADC ) | // Generic Clock ADC
     934:	4a19      	ldr	r2, [pc, #100]	; (99c <init+0xe0>)
     936:	805a      	strh	r2, [r3, #2]
                      GCLK_CLKCTRL_GEN_GCLK0     | // Generic Clock Generator 0 is source
                      GCLK_CLKCTRL_CLKEN ;

  while( ADC->STATUS.bit.SYNCBUSY == 1 );          // Wait for synchronization of registers between the clock domains
     938:	4b19      	ldr	r3, [pc, #100]	; (9a0 <init+0xe4>)
     93a:	001a      	movs	r2, r3
     93c:	7e59      	ldrb	r1, [r3, #25]
     93e:	09c9      	lsrs	r1, r1, #7
     940:	2901      	cmp	r1, #1
     942:	d0fb      	beq.n	93c <init+0x80>

  ADC->CTRLB.reg = ADC_CTRLB_PRESCALER_DIV512 |    // Divide Clock by 512.
     944:	21e4      	movs	r1, #228	; 0xe4
     946:	00c9      	lsls	r1, r1, #3
     948:	8099      	strh	r1, [r3, #4]
                   ADC_CTRLB_RESSEL_10BIT;         // 10 bits resolution as default

  ADC->SAMPCTRL.reg = 0x3f;                        // Set max Sampling Time Length
     94a:	213f      	movs	r1, #63	; 0x3f
     94c:	70d9      	strb	r1, [r3, #3]

  while( ADC->STATUS.bit.SYNCBUSY == 1 );          // Wait for synchronization of registers between the clock domains
     94e:	7e53      	ldrb	r3, [r2, #25]
     950:	09db      	lsrs	r3, r3, #7
     952:	2b01      	cmp	r3, #1
     954:	d0fb      	beq.n	94e <init+0x92>

  ADC->INPUTCTRL.reg = ADC_INPUTCTRL_MUXNEG_GND;   // No Negative input (Internal Ground)
     956:	23c0      	movs	r3, #192	; 0xc0

  // Averaging (see datasheet table in AVGCTRL register description)
  ADC->AVGCTRL.reg = ADC_AVGCTRL_SAMPLENUM_1 |    // 1 sample only (no oversampling nor averaging)
     958:	2000      	movs	r0, #0
  ADC->INPUTCTRL.reg = ADC_INPUTCTRL_MUXNEG_GND;   // No Negative input (Internal Ground)
     95a:	015b      	lsls	r3, r3, #5
     95c:	6113      	str	r3, [r2, #16]
  ADC->AVGCTRL.reg = ADC_AVGCTRL_SAMPLENUM_1 |    // 1 sample only (no oversampling nor averaging)
     95e:	7090      	strb	r0, [r2, #2]
                     ADC_AVGCTRL_ADJRES(0x0ul);   // Adjusting result by 0

  analogReference( AR_DEFAULT ) ; // Analog Reference is AREF pin (3.3v)
     960:	f000 f824 	bl	9ac <analogReference>

  // Initialize DAC
  // Setting clock
  while ( GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY );
     964:	7863      	ldrb	r3, [r4, #1]
     966:	b25b      	sxtb	r3, r3
     968:	2b00      	cmp	r3, #0
     96a:	dbfb      	blt.n	964 <init+0xa8>
  GCLK->CLKCTRL.reg = GCLK_CLKCTRL_ID( GCM_DAC ) | // Generic Clock ADC
     96c:	4b0d      	ldr	r3, [pc, #52]	; (9a4 <init+0xe8>)
                      GCLK_CLKCTRL_GEN_GCLK0     | // Generic Clock Generator 0 is source
                      GCLK_CLKCTRL_CLKEN ;

  while ( DAC->STATUS.bit.SYNCBUSY == 1 ); // Wait for synchronization of registers between the clock domains
     96e:	4a0e      	ldr	r2, [pc, #56]	; (9a8 <init+0xec>)
  GCLK->CLKCTRL.reg = GCLK_CLKCTRL_ID( GCM_DAC ) | // Generic Clock ADC
     970:	8063      	strh	r3, [r4, #2]
  while ( DAC->STATUS.bit.SYNCBUSY == 1 ); // Wait for synchronization of registers between the clock domains
     972:	79d3      	ldrb	r3, [r2, #7]
     974:	09db      	lsrs	r3, r3, #7
     976:	2b01      	cmp	r3, #1
     978:	d0fb      	beq.n	972 <init+0xb6>
  DAC->CTRLB.reg = DAC_CTRLB_REFSEL_AVCC | // Using the 3.3V reference
     97a:	2341      	movs	r3, #65	; 0x41
     97c:	7053      	strb	r3, [r2, #1]
                   DAC_CTRLB_EOEN ;        // External Output Enable (Vout)
}
     97e:	bd10      	pop	{r4, pc}
     980:	e7fe      	b.n	980 <init+0xc4>
     982:	46c0      	nop			; (mov r8, r8)
     984:	20000004 	.word	0x20000004
     988:	00ffffff 	.word	0x00ffffff
     98c:	e000e010 	.word	0xe000e010
     990:	e000ed00 	.word	0xe000ed00
     994:	40000400 	.word	0x40000400
     998:	40000c00 	.word	0x40000c00
     99c:	0000401e 	.word	0x0000401e
     9a0:	42004000 	.word	0x42004000
     9a4:	00004021 	.word	0x00004021
     9a8:	42004800 	.word	0x42004800

000009ac <analogReference>:
static int _writeResolution = 8;

// Wait for synchronization of registers between the clock domains
static __inline__ void syncADC() __attribute__((always_inline, unused));
static void syncADC() {
  while (ADC->STATUS.bit.SYNCBUSY == 1)
     9ac:	4a16      	ldr	r2, [pc, #88]	; (a08 <analogReference+0x5c>)
 * External Reference should be between 1v and VDDANA-0.6v=2.7v
 *
 * Warning : On Arduino Zero board the input/output voltage for SAMD21G18 is 3.3 volts maximum
 */
void analogReference(eAnalogReference mode)
{
     9ae:	b500      	push	{lr}
     9b0:	0013      	movs	r3, r2
  while (ADC->STATUS.bit.SYNCBUSY == 1)
     9b2:	7e51      	ldrb	r1, [r2, #25]
     9b4:	09c9      	lsrs	r1, r1, #7
     9b6:	2901      	cmp	r1, #1
     9b8:	d0fb      	beq.n	9b2 <analogReference+0x6>
  syncADC();
  switch (mode)
     9ba:	3801      	subs	r0, #1
     9bc:	2804      	cmp	r0, #4
     9be:	d816      	bhi.n	9ee <analogReference+0x42>
      ADC->INPUTCTRL.bit.GAIN = ADC_INPUTCTRL_GAIN_1X_Val;      // Gain Factor Selection
      ADC->REFCTRL.bit.REFSEL = ADC_REFCTRL_REFSEL_INT1V_Val;   // 1.0V voltage reference
      break;

    case AR_INTERNAL1V65:
      ADC->INPUTCTRL.bit.GAIN = ADC_INPUTCTRL_GAIN_1X_Val;      // Gain Factor Selection
     9c0:	6919      	ldr	r1, [r3, #16]
     9c2:	4a12      	ldr	r2, [pc, #72]	; (a0c <analogReference+0x60>)
     9c4:	400a      	ands	r2, r1
      ADC->REFCTRL.bit.REFSEL = ADC_REFCTRL_REFSEL_INTVCC1_Val; // 1/2 VDDANA = 0.5* 3V3 = 1.65V
     9c6:	210f      	movs	r1, #15
      ADC->INPUTCTRL.bit.GAIN = ADC_INPUTCTRL_GAIN_1X_Val;      // Gain Factor Selection
     9c8:	611a      	str	r2, [r3, #16]
      ADC->REFCTRL.bit.REFSEL = ADC_REFCTRL_REFSEL_INTVCC1_Val; // 1/2 VDDANA = 0.5* 3V3 = 1.65V
     9ca:	785a      	ldrb	r2, [r3, #1]
     9cc:	438a      	bics	r2, r1
  switch (mode)
     9ce:	f000 fcb3 	bl	1338 <__gnu_thumb1_case_uqi>
     9d2:	0803      	.short	0x0803
     9d4:	0b06      	.short	0x0b06
     9d6:	03          	.byte	0x03
     9d7:	00          	.byte	0x00
      ADC->REFCTRL.bit.REFSEL = ADC_REFCTRL_REFSEL_INTVCC0_Val; // 1/1.48 VDDANA = 1/1.48* 3V3 = 2.2297
     9d8:	0011      	movs	r1, r2
     9da:	2201      	movs	r2, #1
      ADC->REFCTRL.bit.REFSEL = ADC_REFCTRL_REFSEL_INTVCC1_Val; // 1/2 VDDANA = 0.5* 3V3 = 1.65V
     9dc:	430a      	orrs	r2, r1
     9de:	705a      	strb	r2, [r3, #1]
    default:
      ADC->INPUTCTRL.bit.GAIN = ADC_INPUTCTRL_GAIN_DIV2_Val;
      ADC->REFCTRL.bit.REFSEL = ADC_REFCTRL_REFSEL_INTVCC1_Val; // 1/2 VDDANA = 0.5* 3V3 = 1.65V
      break;
  }
}
     9e0:	bd00      	pop	{pc}
      ADC->REFCTRL.bit.REFSEL = ADC_REFCTRL_REFSEL_AREFA_Val;
     9e2:	0011      	movs	r1, r2
     9e4:	2203      	movs	r2, #3
     9e6:	e7f9      	b.n	9dc <analogReference+0x30>
      ADC->REFCTRL.bit.REFSEL = ADC_REFCTRL_REFSEL_INTVCC1_Val; // 1/2 VDDANA = 0.5* 3V3 = 1.65V
     9e8:	0011      	movs	r1, r2
     9ea:	2202      	movs	r2, #2
     9ec:	e7f6      	b.n	9dc <analogReference+0x30>
      ADC->INPUTCTRL.bit.GAIN = ADC_INPUTCTRL_GAIN_DIV2_Val;
     9ee:	23f0      	movs	r3, #240	; 0xf0
     9f0:	6911      	ldr	r1, [r2, #16]
     9f2:	051b      	lsls	r3, r3, #20
     9f4:	430b      	orrs	r3, r1
      ADC->REFCTRL.bit.REFSEL = ADC_REFCTRL_REFSEL_INTVCC1_Val; // 1/2 VDDANA = 0.5* 3V3 = 1.65V
     9f6:	210f      	movs	r1, #15
      ADC->INPUTCTRL.bit.GAIN = ADC_INPUTCTRL_GAIN_DIV2_Val;
     9f8:	6113      	str	r3, [r2, #16]
      ADC->REFCTRL.bit.REFSEL = ADC_REFCTRL_REFSEL_INTVCC1_Val; // 1/2 VDDANA = 0.5* 3V3 = 1.65V
     9fa:	7853      	ldrb	r3, [r2, #1]
     9fc:	438b      	bics	r3, r1
     9fe:	0019      	movs	r1, r3
     a00:	2302      	movs	r3, #2
     a02:	430b      	orrs	r3, r1
     a04:	7053      	strb	r3, [r2, #1]
}
     a06:	e7eb      	b.n	9e0 <analogReference+0x34>
     a08:	42004000 	.word	0x42004000
     a0c:	f0ffffff 	.word	0xf0ffffff

00000a10 <pinMode>:
#endif

void pinMode( uint32_t ulPin, uint32_t ulMode )
{
  // Handle the case the pin isn't usable as PIO
  if ( g_APinDescription[ulPin].ulPinType == PIO_NOT_A_PIN )
     a10:	2318      	movs	r3, #24
{
     a12:	b530      	push	{r4, r5, lr}
  if ( g_APinDescription[ulPin].ulPinType == PIO_NOT_A_PIN )
     a14:	001d      	movs	r5, r3
{
     a16:	0004      	movs	r4, r0
  if ( g_APinDescription[ulPin].ulPinType == PIO_NOT_A_PIN )
     a18:	4345      	muls	r5, r0
     a1a:	2008      	movs	r0, #8
     a1c:	4a20      	ldr	r2, [pc, #128]	; (aa0 <pinMode+0x90>)
     a1e:	1955      	adds	r5, r2, r5
     a20:	5628      	ldrsb	r0, [r5, r0]
     a22:	3001      	adds	r0, #1
     a24:	d014      	beq.n	a50 <pinMode+0x40>
  {
    return ;
  }

  // Set pin mode according to chapter '22.6.3 I/O Pin Configuration'
  switch ( ulMode )
     a26:	2903      	cmp	r1, #3
     a28:	d812      	bhi.n	a50 <pinMode+0x40>
     a2a:	0008      	movs	r0, r1
      PORT->Group[g_APinDescription[ulPin].ulPort].OUTSET.reg = (uint32_t)(1<<g_APinDescription[ulPin].ulPin) ;
    break ;

    case INPUT_PULLDOWN:
      // Set pin to input mode with pull-down resistor enabled
      PORT->Group[g_APinDescription[ulPin].ulPort].PINCFG[g_APinDescription[ulPin].ulPin].reg=(uint8_t)(PORT_PINCFG_INEN|PORT_PINCFG_PULLEN) ;
     a2c:	4363      	muls	r3, r4
     a2e:	56d1      	ldrsb	r1, [r2, r3]
     a30:	18d3      	adds	r3, r2, r3
  switch ( ulMode )
     a32:	f000 fc81 	bl	1338 <__gnu_thumb1_case_uqi>
     a36:	2802      	.short	0x2802
     a38:	1b0e      	.short	0x1b0e
      PORT->Group[g_APinDescription[ulPin].ulPort].PINCFG[g_APinDescription[ulPin].ulPin].reg=(uint8_t)(PORT_PINCFG_INEN) ;
     a3a:	6858      	ldr	r0, [r3, #4]
     a3c:	01cb      	lsls	r3, r1, #7
     a3e:	2102      	movs	r1, #2
     a40:	4a18      	ldr	r2, [pc, #96]	; (aa4 <pinMode+0x94>)
     a42:	189b      	adds	r3, r3, r2
     a44:	181a      	adds	r2, r3, r0
     a46:	3240      	adds	r2, #64	; 0x40
     a48:	7011      	strb	r1, [r2, #0]
      PORT->Group[g_APinDescription[ulPin].ulPort].DIRCLR.reg = (uint32_t)(1<<g_APinDescription[ulPin].ulPin) ;
     a4a:	2201      	movs	r2, #1
     a4c:	4082      	lsls	r2, r0
     a4e:	605a      	str	r2, [r3, #4]

    default:
      // do nothing
    break ;
  }
}
     a50:	bd30      	pop	{r4, r5, pc}
      PORT->Group[g_APinDescription[ulPin].ulPort].PINCFG[g_APinDescription[ulPin].ulPin].reg=(uint8_t)(PORT_PINCFG_INEN|PORT_PINCFG_PULLEN) ;
     a52:	6858      	ldr	r0, [r3, #4]
     a54:	01cb      	lsls	r3, r1, #7
     a56:	2106      	movs	r1, #6
     a58:	4a12      	ldr	r2, [pc, #72]	; (aa4 <pinMode+0x94>)
     a5a:	189b      	adds	r3, r3, r2
     a5c:	181a      	adds	r2, r3, r0
     a5e:	3240      	adds	r2, #64	; 0x40
     a60:	7011      	strb	r1, [r2, #0]
      PORT->Group[g_APinDescription[ulPin].ulPort].DIRCLR.reg = (uint32_t)(1<<g_APinDescription[ulPin].ulPin) ;
     a62:	2201      	movs	r2, #1
     a64:	4082      	lsls	r2, r0
     a66:	605a      	str	r2, [r3, #4]
      PORT->Group[g_APinDescription[ulPin].ulPort].OUTSET.reg = (uint32_t)(1<<g_APinDescription[ulPin].ulPin) ;
     a68:	619a      	str	r2, [r3, #24]
    break ;
     a6a:	e7f1      	b.n	a50 <pinMode+0x40>
      PORT->Group[g_APinDescription[ulPin].ulPort].PINCFG[g_APinDescription[ulPin].ulPin].reg=(uint8_t)(PORT_PINCFG_INEN|PORT_PINCFG_PULLEN) ;
     a6c:	6858      	ldr	r0, [r3, #4]
     a6e:	01cb      	lsls	r3, r1, #7
     a70:	2106      	movs	r1, #6
     a72:	4a0c      	ldr	r2, [pc, #48]	; (aa4 <pinMode+0x94>)
     a74:	189b      	adds	r3, r3, r2
     a76:	181a      	adds	r2, r3, r0
     a78:	3240      	adds	r2, #64	; 0x40
     a7a:	7011      	strb	r1, [r2, #0]
      PORT->Group[g_APinDescription[ulPin].ulPort].DIRCLR.reg = (uint32_t)(1<<g_APinDescription[ulPin].ulPin) ;
     a7c:	2201      	movs	r2, #1
     a7e:	4082      	lsls	r2, r0
     a80:	605a      	str	r2, [r3, #4]
      PORT->Group[g_APinDescription[ulPin].ulPort].OUTCLR.reg = (uint32_t)(1<<g_APinDescription[ulPin].ulPin) ;
     a82:	615a      	str	r2, [r3, #20]
    break ;
     a84:	e7e4      	b.n	a50 <pinMode+0x40>
      PORT->Group[g_APinDescription[ulPin].ulPort].PINCFG[g_APinDescription[ulPin].ulPin].reg=(uint8_t)(PORT_PINCFG_INEN) ;
     a86:	6858      	ldr	r0, [r3, #4]
     a88:	01cb      	lsls	r3, r1, #7
     a8a:	2102      	movs	r1, #2
     a8c:	4a05      	ldr	r2, [pc, #20]	; (aa4 <pinMode+0x94>)
     a8e:	189b      	adds	r3, r3, r2
     a90:	181a      	adds	r2, r3, r0
     a92:	3240      	adds	r2, #64	; 0x40
     a94:	7011      	strb	r1, [r2, #0]
      PORT->Group[g_APinDescription[ulPin].ulPort].DIRSET.reg = (uint32_t)(1<<g_APinDescription[ulPin].ulPin) ;
     a96:	2201      	movs	r2, #1
     a98:	4082      	lsls	r2, r0
     a9a:	609a      	str	r2, [r3, #8]
    break ;
     a9c:	e7d8      	b.n	a50 <pinMode+0x40>
     a9e:	46c0      	nop			; (mov r8, r8)
     aa0:	0000153c 	.word	0x0000153c
     aa4:	41004400 	.word	0x41004400

00000aa8 <pinPeripheral>:

#include "Arduino.h"
#include "wiring_private.h"

int pinPeripheral( uint32_t ulPin, EPioType ulPeripheral )
{
     aa8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     aaa:	0003      	movs	r3, r0
  // Handle the case the pin isn't usable as PIO
  if ( g_APinDescription[ulPin].ulPinType == PIO_NOT_A_PIN )
     aac:	2018      	movs	r0, #24
     aae:	4358      	muls	r0, r3
     ab0:	4a2a      	ldr	r2, [pc, #168]	; (b5c <pinPeripheral+0xb4>)
     ab2:	1810      	adds	r0, r2, r0
     ab4:	7a00      	ldrb	r0, [r0, #8]
     ab6:	b240      	sxtb	r0, r0
  {
    return -1 ;
     ab8:	0004      	movs	r4, r0
  if ( g_APinDescription[ulPin].ulPinType == PIO_NOT_A_PIN )
     aba:	3001      	adds	r0, #1
     abc:	d013      	beq.n	ae6 <pinPeripheral+0x3e>
  }

  switch ( ulPeripheral )
     abe:	1c48      	adds	r0, r1, #1
    case PIO_NOT_A_PIN:
      return -1l ;
    break ;
  }

  return 0l ;
     ac0:	2400      	movs	r4, #0
  switch ( ulPeripheral )
     ac2:	280c      	cmp	r0, #12
     ac4:	d80f      	bhi.n	ae6 <pinPeripheral+0x3e>
     ac6:	f000 fc37 	bl	1338 <__gnu_thumb1_case_uqi>
     aca:	1c45      	.short	0x1c45
     acc:	1c1c1c1c 	.word	0x1c1c1c1c
     ad0:	071c1c1c 	.word	0x071c1c1c
     ad4:	0707      	.short	0x0707
     ad6:	07          	.byte	0x07
     ad7:	00          	.byte	0x00
      if ( ulPeripheral == PIO_INPUT )
     ad8:	2909      	cmp	r1, #9
     ada:	d106      	bne.n	aea <pinPeripheral+0x42>
        pinMode( ulPin, INPUT ) ;
     adc:	2100      	movs	r1, #0
          pinMode( ulPin, INPUT_PULLUP ) ;
     ade:	0018      	movs	r0, r3
     ae0:	f7ff ff96 	bl	a10 <pinMode>
  return 0l ;
     ae4:	2400      	movs	r4, #0
}
     ae6:	0020      	movs	r0, r4
     ae8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if ( ulPeripheral == PIO_INPUT_PULLUP )
     aea:	290a      	cmp	r1, #10
     aec:	d101      	bne.n	af2 <pinPeripheral+0x4a>
          pinMode( ulPin, INPUT_PULLUP ) ;
     aee:	3908      	subs	r1, #8
     af0:	e7f5      	b.n	ade <pinPeripheral+0x36>
  return 0l ;
     af2:	2400      	movs	r4, #0
          if ( ulPeripheral == PIO_OUTPUT )
     af4:	290b      	cmp	r1, #11
     af6:	d1f6      	bne.n	ae6 <pinPeripheral+0x3e>
            pinMode( ulPin, OUTPUT ) ;
     af8:	390a      	subs	r1, #10
     afa:	0018      	movs	r0, r3
     afc:	f7ff ff88 	bl	a10 <pinMode>
     b00:	e7f1      	b.n	ae6 <pinPeripheral+0x3e>
      if ( g_APinDescription[ulPin].ulPin & 1 ) // is pin odd?
     b02:	2018      	movs	r0, #24
     b04:	4343      	muls	r3, r0
     b06:	18d0      	adds	r0, r2, r3
     b08:	6846      	ldr	r6, [r0, #4]
     b0a:	2501      	movs	r5, #1
     b0c:	0034      	movs	r4, r6
     b0e:	56d2      	ldrsb	r2, [r2, r3]
        temp = (PORT->Group[g_APinDescription[ulPin].ulPort].PMUX[g_APinDescription[ulPin].ulPin >> 1].reg) & PORT_PMUX_PMUXE( 0xF ) ;
     b10:	4813      	ldr	r0, [pc, #76]	; (b60 <pinPeripheral+0xb8>)
     b12:	01d2      	lsls	r2, r2, #7
     b14:	1812      	adds	r2, r2, r0
     b16:	0873      	lsrs	r3, r6, #1
     b18:	18d3      	adds	r3, r2, r3
     b1a:	3330      	adds	r3, #48	; 0x30
      if ( g_APinDescription[ulPin].ulPin & 1 ) // is pin odd?
     b1c:	402c      	ands	r4, r5
        temp = (PORT->Group[g_APinDescription[ulPin].ulPort].PMUX[g_APinDescription[ulPin].ulPin >> 1].reg) & PORT_PMUX_PMUXE( 0xF ) ;
     b1e:	7818      	ldrb	r0, [r3, #0]
      if ( g_APinDescription[ulPin].ulPin & 1 ) // is pin odd?
     b20:	2c00      	cmp	r4, #0
     b22:	d00b      	beq.n	b3c <pinPeripheral+0x94>
        PORT->Group[g_APinDescription[ulPin].ulPort].PMUX[g_APinDescription[ulPin].ulPin >> 1].reg = temp|PORT_PMUX_PMUXO( ulPeripheral ) ;
     b24:	240f      	movs	r4, #15
     b26:	0109      	lsls	r1, r1, #4
     b28:	4020      	ands	r0, r4
     b2a:	4301      	orrs	r1, r0
     b2c:	b2c9      	uxtb	r1, r1
        PORT->Group[g_APinDescription[ulPin].ulPort].PINCFG[g_APinDescription[ulPin].ulPin].reg |= PORT_PINCFG_PMUXEN ;
     b2e:	1992      	adds	r2, r2, r6
        PORT->Group[g_APinDescription[ulPin].ulPort].PMUX[g_APinDescription[ulPin].ulPin >> 1].reg = temp|PORT_PMUX_PMUXO( ulPeripheral ) ;
     b30:	7019      	strb	r1, [r3, #0]
        PORT->Group[g_APinDescription[ulPin].ulPort].PINCFG[g_APinDescription[ulPin].ulPin].reg |= PORT_PINCFG_PMUXEN ;
     b32:	3240      	adds	r2, #64	; 0x40
     b34:	7813      	ldrb	r3, [r2, #0]
     b36:	431d      	orrs	r5, r3
     b38:	7015      	strb	r5, [r2, #0]
     b3a:	e7d3      	b.n	ae4 <pinPeripheral+0x3c>
        PORT->Group[g_APinDescription[ulPin].ulPort].PMUX[g_APinDescription[ulPin].ulPin >> 1].reg = temp|PORT_PMUX_PMUXE( ulPeripheral ) ;
     b3c:	270f      	movs	r7, #15
     b3e:	43b8      	bics	r0, r7
     b40:	4301      	orrs	r1, r0
        PORT->Group[g_APinDescription[ulPin].ulPort].PINCFG[g_APinDescription[ulPin].ulPin].reg |= PORT_PINCFG_PMUXEN ; // Enable port mux
     b42:	1992      	adds	r2, r2, r6
        PORT->Group[g_APinDescription[ulPin].ulPort].PMUX[g_APinDescription[ulPin].ulPin >> 1].reg = temp|PORT_PMUX_PMUXE( ulPeripheral ) ;
     b44:	b2c9      	uxtb	r1, r1
     b46:	7019      	strb	r1, [r3, #0]
        PORT->Group[g_APinDescription[ulPin].ulPort].PINCFG[g_APinDescription[ulPin].ulPin].reg |= PORT_PINCFG_PMUXEN ; // Enable port mux
     b48:	0013      	movs	r3, r2
     b4a:	3340      	adds	r3, #64	; 0x40
     b4c:	781a      	ldrb	r2, [r3, #0]
     b4e:	4315      	orrs	r5, r2
     b50:	701d      	strb	r5, [r3, #0]
     b52:	e7c8      	b.n	ae6 <pinPeripheral+0x3e>
      return -1l ;
     b54:	2401      	movs	r4, #1
     b56:	4264      	negs	r4, r4
     b58:	e7c5      	b.n	ae6 <pinPeripheral+0x3e>
     b5a:	46c0      	nop			; (mov r8, r8)
     b5c:	0000153c 	.word	0x0000153c
     b60:	41004400 	.word	0x41004400

00000b64 <_ZN8SPIClass4initEv>:
  config(DEFAULT_SPI_SETTINGS);
}

void SPIClass::init()
{
  if (initialized)
     b64:	7a43      	ldrb	r3, [r0, #9]
     b66:	2b00      	cmp	r3, #0
     b68:	d104      	bne.n	b74 <_ZN8SPIClass4initEv+0x10>
    return;
  interruptMode = SPI_IMODE_NONE;
     b6a:	7283      	strb	r3, [r0, #10]
  interruptSave = 0;
     b6c:	72c3      	strb	r3, [r0, #11]
  interruptMask = 0;
     b6e:	60c3      	str	r3, [r0, #12]
  initialized = true;
     b70:	3301      	adds	r3, #1
     b72:	7243      	strb	r3, [r0, #9]
}
     b74:	4770      	bx	lr

00000b76 <_ZN8SPIClass6configE11SPISettings>:

void SPIClass::config(SPISettings settings)
{
     b76:	b530      	push	{r4, r5, lr}
     b78:	0004      	movs	r4, r0
     b7a:	b085      	sub	sp, #20
     b7c:	ad02      	add	r5, sp, #8
  _p_sercom->disableSPI();
     b7e:	6800      	ldr	r0, [r0, #0]
{
     b80:	9102      	str	r1, [sp, #8]
     b82:	9203      	str	r2, [sp, #12]
  _p_sercom->disableSPI();
     b84:	f000 fa97 	bl	10b6 <_ZN6SERCOM10disableSPIEv>

  _p_sercom->initSPI(_padTx, _padRx, SPI_CHAR_SIZE_8_BITS, settings.bitOrder);
     b88:	796b      	ldrb	r3, [r5, #5]
     b8a:	7a22      	ldrb	r2, [r4, #8]
     b8c:	79e1      	ldrb	r1, [r4, #7]
     b8e:	9300      	str	r3, [sp, #0]
     b90:	6820      	ldr	r0, [r4, #0]
     b92:	2300      	movs	r3, #0
     b94:	f000 fb82 	bl	129c <_ZN6SERCOM7initSPIE14SercomSpiTXPad11SercomRXPad17SercomSpiCharSize15SercomDataOrder>
  _p_sercom->initSPIClock(settings.dataMode, settings.clockFreq);
     b98:	7929      	ldrb	r1, [r5, #4]
     b9a:	9a02      	ldr	r2, [sp, #8]
     b9c:	6820      	ldr	r0, [r4, #0]
     b9e:	f000 fa5f 	bl	1060 <_ZN6SERCOM12initSPIClockE18SercomSpiClockModem>

  _p_sercom->enableSPI();
     ba2:	6820      	ldr	r0, [r4, #0]
     ba4:	f000 fa7e 	bl	10a4 <_ZN6SERCOM9enableSPIEv>
}
     ba8:	b005      	add	sp, #20
     baa:	bd30      	pop	{r4, r5, pc}

00000bac <_ZN8SPIClass5beginEv>:
{
     bac:	b570      	push	{r4, r5, r6, lr}
  pinPeripheral(_uc_pinMiso, g_APinDescription[_uc_pinMiso].ulPinType);
     bae:	2618      	movs	r6, #24
{
     bb0:	0004      	movs	r4, r0
  init();
     bb2:	f7ff ffd7 	bl	b64 <_ZN8SPIClass4initEv>
  pinPeripheral(_uc_pinMiso, g_APinDescription[_uc_pinMiso].ulPinType);
     bb6:	0033      	movs	r3, r6
     bb8:	2108      	movs	r1, #8
     bba:	7920      	ldrb	r0, [r4, #4]
     bbc:	4d0d      	ldr	r5, [pc, #52]	; (bf4 <_ZN8SPIClass5beginEv+0x48>)
     bbe:	4343      	muls	r3, r0
     bc0:	18eb      	adds	r3, r5, r3
     bc2:	5659      	ldrsb	r1, [r3, r1]
     bc4:	f7ff ff70 	bl	aa8 <pinPeripheral>
  pinPeripheral(_uc_pinSCK, g_APinDescription[_uc_pinSCK].ulPinType);
     bc8:	0033      	movs	r3, r6
     bca:	2108      	movs	r1, #8
     bcc:	79a0      	ldrb	r0, [r4, #6]
     bce:	4343      	muls	r3, r0
     bd0:	18eb      	adds	r3, r5, r3
     bd2:	5659      	ldrsb	r1, [r3, r1]
     bd4:	f7ff ff68 	bl	aa8 <pinPeripheral>
  pinPeripheral(_uc_pinMosi, g_APinDescription[_uc_pinMosi].ulPinType);
     bd8:	2108      	movs	r1, #8
     bda:	7960      	ldrb	r0, [r4, #5]
     bdc:	4346      	muls	r6, r0
     bde:	19ad      	adds	r5, r5, r6
     be0:	5669      	ldrsb	r1, [r5, r1]
     be2:	f7ff ff61 	bl	aa8 <pinPeripheral>
  config(DEFAULT_SPI_SETTINGS);
     be6:	4b04      	ldr	r3, [pc, #16]	; (bf8 <_ZN8SPIClass5beginEv+0x4c>)
     be8:	0020      	movs	r0, r4
     bea:	cb06      	ldmia	r3!, {r1, r2}
     bec:	f7ff ffc3 	bl	b76 <_ZN8SPIClass6configE11SPISettings>
}
     bf0:	bd70      	pop	{r4, r5, r6, pc}
     bf2:	46c0      	nop			; (mov r8, r8)
     bf4:	0000153c 	.word	0x0000153c
     bf8:	20000054 	.word	0x20000054

00000bfc <_GLOBAL__sub_I__ZN8SPIClassC2EP6SERCOMhhh14SercomSpiTXPad11SercomRXPad>:
  void init_MightInline(uint32_t clock, BitOrder bitOrder, uint8_t dataMode) {
    init_AlwaysInline(clock, bitOrder, dataMode);
  }

  void init_AlwaysInline(uint32_t clock, BitOrder bitOrder, uint8_t dataMode) __attribute__((__always_inline__)) {
    this->clockFreq = (clock >= (F_CPU / SPI_MIN_CLOCK_DIVIDER) ? F_CPU / SPI_MIN_CLOCK_DIVIDER : clock);
     bfc:	4b0a      	ldr	r3, [pc, #40]	; (c28 <_GLOBAL__sub_I__ZN8SPIClassC2EP6SERCOMhhh14SercomSpiTXPad11SercomRXPad+0x2c>)
     bfe:	4a0b      	ldr	r2, [pc, #44]	; (c2c <_GLOBAL__sub_I__ZN8SPIClassC2EP6SERCOMhhh14SercomSpiTXPad11SercomRXPad+0x30>)
     c00:	601a      	str	r2, [r3, #0]

    this->bitOrder = (bitOrder == MSBFIRST ? MSB_FIRST : LSB_FIRST);
     c02:	2200      	movs	r2, #0
     c04:	715a      	strb	r2, [r3, #5]

    switch (dataMode)
    {
      case SPI_MODE0:
        this->dataMode = SERCOM_SPI_MODE_0; break;
     c06:	711a      	strb	r2, [r3, #4]
  initialized = false;
     c08:	4b09      	ldr	r3, [pc, #36]	; (c30 <_GLOBAL__sub_I__ZN8SPIClassC2EP6SERCOMhhh14SercomSpiTXPad11SercomRXPad+0x34>)
     c0a:	725a      	strb	r2, [r3, #9]
  _p_sercom = p_sercom;
     c0c:	4a09      	ldr	r2, [pc, #36]	; (c34 <_GLOBAL__sub_I__ZN8SPIClassC2EP6SERCOMhhh14SercomSpiTXPad11SercomRXPad+0x38>)
     c0e:	601a      	str	r2, [r3, #0]
  _uc_pinMiso = uc_pinMISO;
     c10:	2208      	movs	r2, #8
     c12:	711a      	strb	r2, [r3, #4]
  _uc_pinSCK = uc_pinSCK;
     c14:	3a02      	subs	r2, #2
     c16:	719a      	strb	r2, [r3, #6]
  _uc_pinMosi = uc_pinMOSI;
     c18:	3a01      	subs	r2, #1
     c1a:	715a      	strb	r2, [r3, #5]
  _padTx=PadTx;
     c1c:	3a04      	subs	r2, #4
     c1e:	71da      	strb	r2, [r3, #7]
  _padRx=PadRx;
     c20:	3202      	adds	r2, #2
     c22:	721a      	strb	r2, [r3, #8]
  #ifndef PERIPH_SPI
    #define PERIPH_SPI           sercom4
    #define PAD_SPI_TX           SPI_PAD_2_SCK_3
    #define PAD_SPI_RX           SERCOM_RX_PAD_0
  #endif // PERIPH_SPI
  SPIClass SPI (&PERIPH_SPI,  PIN_SPI_MISO,  PIN_SPI_SCK,  PIN_SPI_MOSI,  PAD_SPI_TX,  PAD_SPI_RX);
     c24:	4770      	bx	lr
     c26:	46c0      	nop			; (mov r8, r8)
     c28:	20000054 	.word	0x20000054
     c2c:	003d0900 	.word	0x003d0900
     c30:	20000044 	.word	0x20000044
     c34:	20000350 	.word	0x20000350

00000c38 <_ZN7TwoWire5writeEPKhj>:

  return 1 ;
}

size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
     c38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     c3a:	0005      	movs	r5, r0
     c3c:	000e      	movs	r6, r1
     c3e:	0017      	movs	r7, r2
  //Try to store all data
  for(size_t i = 0; i < quantity; ++i)
     c40:	2400      	movs	r4, #0
     c42:	42bc      	cmp	r4, r7
     c44:	d008      	beq.n	c58 <_ZN7TwoWire5writeEPKhj+0x20>
  {
    //Return the number of data stored, when the buffer is full (if write return 0)
    if(!write(data[i]))
     c46:	682b      	ldr	r3, [r5, #0]
     c48:	5d31      	ldrb	r1, [r6, r4]
     c4a:	681b      	ldr	r3, [r3, #0]
     c4c:	0028      	movs	r0, r5
     c4e:	4798      	blx	r3
     c50:	2800      	cmp	r0, #0
     c52:	d001      	beq.n	c58 <_ZN7TwoWire5writeEPKhj+0x20>
  for(size_t i = 0; i < quantity; ++i)
     c54:	3401      	adds	r4, #1
     c56:	e7f4      	b.n	c42 <_ZN7TwoWire5writeEPKhj+0xa>
      return i;
  }

  //All data stored
  return quantity;
}
     c58:	0020      	movs	r0, r4
     c5a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00000c5c <_ZN7TwoWire5flushEv>:

void TwoWire::flush(void)
{
  // Do nothing, use endTransmission(..) to force
  // data transfer.
}
     c5c:	4770      	bx	lr

00000c5e <_ZN7TwoWire4peekEv>:
  if(_iTail == _iHead)
     c5e:	0003      	movs	r3, r0
     c60:	33fc      	adds	r3, #252	; 0xfc
     c62:	6a19      	ldr	r1, [r3, #32]
     c64:	69da      	ldr	r2, [r3, #28]
     c66:	4291      	cmp	r1, r2
     c68:	d003      	beq.n	c72 <_ZN7TwoWire4peekEv+0x14>
  return _aucBuffer[_iTail];
     c6a:	6a1b      	ldr	r3, [r3, #32]
     c6c:	18c0      	adds	r0, r0, r3
     c6e:	7e00      	ldrb	r0, [r0, #24]
}
     c70:	4770      	bx	lr
    return -1;
     c72:	2001      	movs	r0, #1
     c74:	4240      	negs	r0, r0
  return rxBuffer.peek();
     c76:	e7fb      	b.n	c70 <_ZN7TwoWire4peekEv+0x12>

00000c78 <_ZN7TwoWire9availableEv>:
  int delta = _iHead - _iTail;
     c78:	0003      	movs	r3, r0
     c7a:	33fc      	adds	r3, #252	; 0xfc
     c7c:	69d8      	ldr	r0, [r3, #28]
     c7e:	6a1b      	ldr	r3, [r3, #32]
     c80:	1ac0      	subs	r0, r0, r3
  if(delta < 0)
     c82:	d501      	bpl.n	c88 <_ZN7TwoWire9availableEv+0x10>
    return N + delta;
     c84:	3001      	adds	r0, #1
     c86:	30ff      	adds	r0, #255	; 0xff
}
     c88:	4770      	bx	lr
	...

00000c8c <_ZN7TwoWireC1EP6SERCOMhh>:
TwoWire::TwoWire(SERCOM * s, uint8_t pinSDA, uint8_t pinSCL)
     c8c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
     c8e:	9301      	str	r3, [sp, #4]
     c90:	23fa      	movs	r3, #250	; 0xfa
    memset( _aucBuffer, 0, N ) ;
     c92:	2680      	movs	r6, #128	; 0x80
     c94:	2500      	movs	r5, #0
     c96:	0004      	movs	r4, r0
     c98:	009b      	lsls	r3, r3, #2
     c9a:	6083      	str	r3, [r0, #8]
     c9c:	4b12      	ldr	r3, [pc, #72]	; (ce8 <_ZN7TwoWireC1EP6SERCOMhh+0x5c>)
     c9e:	0076      	lsls	r6, r6, #1
     ca0:	3308      	adds	r3, #8
     ca2:	000f      	movs	r7, r1
     ca4:	6045      	str	r5, [r0, #4]
     ca6:	0029      	movs	r1, r5
     ca8:	9200      	str	r2, [sp, #0]
     caa:	6003      	str	r3, [r0, #0]
     cac:	0032      	movs	r2, r6
     cae:	3018      	adds	r0, #24
     cb0:	f000 fbfc 	bl	14ac <memset>
  _iHead = 0;
     cb4:	0023      	movs	r3, r4
    memset( _aucBuffer, 0, N ) ;
     cb6:	0020      	movs	r0, r4
  _iHead = 0;
     cb8:	33fc      	adds	r3, #252	; 0xfc
    memset( _aucBuffer, 0, N ) ;
     cba:	3021      	adds	r0, #33	; 0x21
  _iHead = 0;
     cbc:	61dd      	str	r5, [r3, #28]
    memset( _aucBuffer, 0, N ) ;
     cbe:	0032      	movs	r2, r6
  _iTail = 0;
     cc0:	621d      	str	r5, [r3, #32]
    memset( _aucBuffer, 0, N ) ;
     cc2:	0029      	movs	r1, r5
     cc4:	30ff      	adds	r0, #255	; 0xff
     cc6:	f000 fbf1 	bl	14ac <memset>
  _iHead = 0;
     cca:	2387      	movs	r3, #135	; 0x87
     ccc:	009b      	lsls	r3, r3, #2
     cce:	18e3      	adds	r3, r4, r3
     cd0:	605d      	str	r5, [r3, #4]
  _iTail = 0;
     cd2:	609d      	str	r5, [r3, #8]
  this->_uc_pinSDA=pinSDA;
     cd4:	466b      	mov	r3, sp
     cd6:	781b      	ldrb	r3, [r3, #0]
  this->sercom = s;
     cd8:	6127      	str	r7, [r4, #16]
  this->_uc_pinSDA=pinSDA;
     cda:	7523      	strb	r3, [r4, #20]
  this->_uc_pinSCL=pinSCL;
     cdc:	466b      	mov	r3, sp
     cde:	791b      	ldrb	r3, [r3, #4]
  transmissionBegun = false;
     ce0:	75a5      	strb	r5, [r4, #22]
}
     ce2:	0020      	movs	r0, r4
  this->_uc_pinSCL=pinSCL;
     ce4:	7563      	strb	r3, [r4, #21]
}
     ce6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
     ce8:	00001518 	.word	0x00001518

00000cec <_ZN7TwoWire5beginEv>:
void TwoWire::begin(void) {
     cec:	b570      	push	{r4, r5, r6, lr}
     cee:	0006      	movs	r6, r0
  pinPeripheral(_uc_pinSDA, g_APinDescription[_uc_pinSDA].ulPinType);
     cf0:	2518      	movs	r5, #24
  sercom->initMasterWIRE(TWI_CLOCK);
     cf2:	490c      	ldr	r1, [pc, #48]	; (d24 <_ZN7TwoWire5beginEv+0x38>)
     cf4:	6900      	ldr	r0, [r0, #16]
     cf6:	f000 faf5 	bl	12e4 <_ZN6SERCOM14initMasterWIREEm>
  sercom->enableWIRE();
     cfa:	6930      	ldr	r0, [r6, #16]
     cfc:	f000 f9f0 	bl	10e0 <_ZN6SERCOM10enableWIREEv>
  pinPeripheral(_uc_pinSDA, g_APinDescription[_uc_pinSDA].ulPinType);
     d00:	002b      	movs	r3, r5
     d02:	2108      	movs	r1, #8
     d04:	7d30      	ldrb	r0, [r6, #20]
     d06:	4c08      	ldr	r4, [pc, #32]	; (d28 <_ZN7TwoWire5beginEv+0x3c>)
     d08:	4343      	muls	r3, r0
     d0a:	18e3      	adds	r3, r4, r3
     d0c:	5659      	ldrsb	r1, [r3, r1]
     d0e:	f7ff fecb 	bl	aa8 <pinPeripheral>
  pinPeripheral(_uc_pinSCL, g_APinDescription[_uc_pinSCL].ulPinType);
     d12:	2108      	movs	r1, #8
     d14:	7d70      	ldrb	r0, [r6, #21]
     d16:	4345      	muls	r5, r0
     d18:	1964      	adds	r4, r4, r5
     d1a:	5661      	ldrsb	r1, [r4, r1]
     d1c:	f7ff fec4 	bl	aa8 <pinPeripheral>
}
     d20:	bd70      	pop	{r4, r5, r6, pc}
     d22:	46c0      	nop			; (mov r8, r8)
     d24:	000186a0 	.word	0x000186a0
     d28:	0000153c 	.word	0x0000153c

00000d2c <_ZN11RingBufferNILi256EE10store_charEh>:
  int i = nextIndex(_iHead);
     d2c:	0002      	movs	r2, r0
     d2e:	32fc      	adds	r2, #252	; 0xfc
     d30:	6853      	ldr	r3, [r2, #4]
void RingBufferN<N>::store_char( uint8_t c )
     d32:	b510      	push	{r4, lr}
  return (uint32_t)(index + 1) % N;
     d34:	3301      	adds	r3, #1
  if ( i != _iTail )
     d36:	6894      	ldr	r4, [r2, #8]
  return (uint32_t)(index + 1) % N;
     d38:	b2db      	uxtb	r3, r3
  if ( i != _iTail )
     d3a:	429c      	cmp	r4, r3
     d3c:	d002      	beq.n	d44 <_ZN11RingBufferNILi256EE10store_charEh+0x18>
    _aucBuffer[_iHead] = c ;
     d3e:	6854      	ldr	r4, [r2, #4]
     d40:	5501      	strb	r1, [r0, r4]
    _iHead = i ;
     d42:	6053      	str	r3, [r2, #4]
}
     d44:	bd10      	pop	{r4, pc}

00000d46 <_ZN7TwoWire5writeEh>:
    return 0 ;
     d46:	2200      	movs	r2, #0
{
     d48:	b510      	push	{r4, lr}
  if ( !transmissionBegun || txBuffer.isFull() )
     d4a:	7d83      	ldrb	r3, [r0, #22]
     d4c:	4293      	cmp	r3, r2
     d4e:	d00d      	beq.n	d6c <_ZN7TwoWire5writeEh+0x26>
  return (nextIndex(_iHead) == _iTail);
     d50:	2387      	movs	r3, #135	; 0x87
     d52:	009b      	lsls	r3, r3, #2
     d54:	18c4      	adds	r4, r0, r3
     d56:	6863      	ldr	r3, [r4, #4]
     d58:	68a4      	ldr	r4, [r4, #8]
  return (uint32_t)(index + 1) % N;
     d5a:	3301      	adds	r3, #1
     d5c:	b2db      	uxtb	r3, r3
     d5e:	42a3      	cmp	r3, r4
     d60:	d004      	beq.n	d6c <_ZN7TwoWire5writeEh+0x26>
  txBuffer.store_char( ucData ) ;
     d62:	3021      	adds	r0, #33	; 0x21
     d64:	30ff      	adds	r0, #255	; 0xff
     d66:	f7ff ffe1 	bl	d2c <_ZN11RingBufferNILi256EE10store_charEh>
  return 1 ;
     d6a:	2201      	movs	r2, #1
}
     d6c:	0010      	movs	r0, r2
     d6e:	bd10      	pop	{r4, pc}

00000d70 <_ZN11RingBufferNILi256EE9read_charEv>:
  if(_iTail == _iHead)
     d70:	0003      	movs	r3, r0
     d72:	33fc      	adds	r3, #252	; 0xfc
     d74:	6899      	ldr	r1, [r3, #8]
     d76:	685a      	ldr	r2, [r3, #4]
     d78:	4291      	cmp	r1, r2
     d7a:	d006      	beq.n	d8a <_ZN11RingBufferNILi256EE9read_charEv+0x1a>
  uint8_t value = _aucBuffer[_iTail];
     d7c:	689a      	ldr	r2, [r3, #8]
     d7e:	5c80      	ldrb	r0, [r0, r2]
  _iTail = nextIndex(_iTail);
     d80:	689a      	ldr	r2, [r3, #8]
  return (uint32_t)(index + 1) % N;
     d82:	3201      	adds	r2, #1
     d84:	b2d2      	uxtb	r2, r2
  _iTail = nextIndex(_iTail);
     d86:	609a      	str	r2, [r3, #8]
}
     d88:	4770      	bx	lr
    return -1;
     d8a:	2001      	movs	r0, #1
     d8c:	4240      	negs	r0, r0
     d8e:	e7fb      	b.n	d88 <_ZN11RingBufferNILi256EE9read_charEv+0x18>

00000d90 <_ZN7TwoWire4readEv>:
{
     d90:	b510      	push	{r4, lr}
  return rxBuffer.read_char();
     d92:	3018      	adds	r0, #24
     d94:	f7ff ffec 	bl	d70 <_ZN11RingBufferNILi256EE9read_charEv>
}
     d98:	bd10      	pop	{r4, pc}

00000d9a <_ZN7TwoWire9onServiceEv>:
{
  onRequestCallback = function;
}

void TwoWire::onService(void)
{
     d9a:	b570      	push	{r4, r5, r6, lr}
     d9c:	0004      	movs	r4, r0
  if ( sercom->isSlaveWIRE() )
     d9e:	6900      	ldr	r0, [r0, #16]
     da0:	f000 f9ec 	bl	117c <_ZN6SERCOM11isSlaveWIREEv>
     da4:	2800      	cmp	r0, #0
     da6:	d028      	beq.n	dfa <_ZN7TwoWire9onServiceEv+0x60>
  {
    if(sercom->isStopDetectedWIRE() || 
     da8:	6920      	ldr	r0, [r4, #16]
     daa:	f000 f9f5 	bl	1198 <_ZN6SERCOM18isStopDetectedWIREEv>
     dae:	2800      	cmp	r0, #0
     db0:	d10e      	bne.n	dd0 <_ZN7TwoWire9onServiceEv+0x36>
        (sercom->isAddressMatch() && sercom->isRestartDetectedWIRE() && !sercom->isMasterReadOperationWIRE())) //Stop or Restart detected
     db2:	6920      	ldr	r0, [r4, #16]
     db4:	f000 f9fa 	bl	11ac <_ZN6SERCOM14isAddressMatchEv>
    if(sercom->isStopDetectedWIRE() || 
     db8:	2800      	cmp	r0, #0
     dba:	d055      	beq.n	e68 <_ZN7TwoWire9onServiceEv+0xce>
        (sercom->isAddressMatch() && sercom->isRestartDetectedWIRE() && !sercom->isMasterReadOperationWIRE())) //Stop or Restart detected
     dbc:	6920      	ldr	r0, [r4, #16]
     dbe:	f000 f9f0 	bl	11a2 <_ZN6SERCOM21isRestartDetectedWIREEv>
     dc2:	2800      	cmp	r0, #0
     dc4:	d050      	beq.n	e68 <_ZN7TwoWire9onServiceEv+0xce>
     dc6:	6920      	ldr	r0, [r4, #16]
     dc8:	f000 f9f5 	bl	11b6 <_ZN6SERCOM25isMasterReadOperationWIREEv>
     dcc:	2800      	cmp	r0, #0
     dce:	d14b      	bne.n	e68 <_ZN7TwoWire9onServiceEv+0xce>
    {
      sercom->prepareAckBitWIRE();
     dd0:	6920      	ldr	r0, [r4, #16]
     dd2:	f000 f9a1 	bl	1118 <_ZN6SERCOM17prepareAckBitWIREEv>
      sercom->prepareCommandBitsWire(0x03);
     dd6:	2103      	movs	r1, #3
     dd8:	6920      	ldr	r0, [r4, #16]
     dda:	f000 f9a7 	bl	112c <_ZN6SERCOM22prepareCommandBitsWireEh>

      //Calling onReceiveCallback, if exists
      if(onReceiveCallback)
     dde:	238c      	movs	r3, #140	; 0x8c
     de0:	009b      	lsls	r3, r3, #2
     de2:	58e5      	ldr	r5, [r4, r3]
     de4:	2d00      	cmp	r5, #0
     de6:	d004      	beq.n	df2 <_ZN7TwoWire9onServiceEv+0x58>
      {
        onReceiveCallback(available());
     de8:	6823      	ldr	r3, [r4, #0]
     dea:	0020      	movs	r0, r4
     dec:	691b      	ldr	r3, [r3, #16]
     dee:	4798      	blx	r3
     df0:	47a8      	blx	r5
  _iHead = 0;
     df2:	2300      	movs	r3, #0
     df4:	34fc      	adds	r4, #252	; 0xfc
     df6:	61e3      	str	r3, [r4, #28]
  _iTail = 0;
     df8:	6223      	str	r3, [r4, #32]

        sercom->prepareCommandBitsWire(0x03);
      }
    }
  }
}
     dfa:	bd70      	pop	{r4, r5, r6, pc}
      sercom->prepareAckBitWIRE();
     dfc:	6920      	ldr	r0, [r4, #16]
     dfe:	f000 f98b 	bl	1118 <_ZN6SERCOM17prepareAckBitWIREEv>
      sercom->prepareCommandBitsWire(0x03);
     e02:	6920      	ldr	r0, [r4, #16]
     e04:	2103      	movs	r1, #3
     e06:	f000 f991 	bl	112c <_ZN6SERCOM22prepareCommandBitsWireEh>
      if(sercom->isMasterReadOperationWIRE()) //Is a request ?
     e0a:	6920      	ldr	r0, [r4, #16]
     e0c:	f000 f9d3 	bl	11b6 <_ZN6SERCOM25isMasterReadOperationWIREEv>
     e10:	2800      	cmp	r0, #0
     e12:	d0f2      	beq.n	dfa <_ZN7TwoWire9onServiceEv+0x60>
  _iHead = 0;
     e14:	2387      	movs	r3, #135	; 0x87
     e16:	2200      	movs	r2, #0
     e18:	009b      	lsls	r3, r3, #2
     e1a:	18e3      	adds	r3, r4, r3
     e1c:	605a      	str	r2, [r3, #4]
  _iTail = 0;
     e1e:	609a      	str	r2, [r3, #8]
        transmissionBegun = true;
     e20:	2301      	movs	r3, #1
     e22:	75a3      	strb	r3, [r4, #22]
        if(onRequestCallback)
     e24:	238b      	movs	r3, #139	; 0x8b
     e26:	009b      	lsls	r3, r3, #2
     e28:	58e3      	ldr	r3, [r4, r3]
     e2a:	4293      	cmp	r3, r2
     e2c:	d0e5      	beq.n	dfa <_ZN7TwoWire9onServiceEv+0x60>
          onRequestCallback();
     e2e:	4798      	blx	r3
     e30:	e7e3      	b.n	dfa <_ZN7TwoWire9onServiceEv+0x60>
  return (nextIndex(_iHead) == _iTail);
     e32:	0022      	movs	r2, r4
     e34:	32fc      	adds	r2, #252	; 0xfc
     e36:	69d3      	ldr	r3, [r2, #28]
     e38:	6a12      	ldr	r2, [r2, #32]
  return (uint32_t)(index + 1) % N;
     e3a:	3301      	adds	r3, #1
     e3c:	b2db      	uxtb	r3, r3
          sercom->prepareNackBitWIRE(); 
     e3e:	6920      	ldr	r0, [r4, #16]
        if (rxBuffer.isFull()) {
     e40:	4293      	cmp	r3, r2
     e42:	d106      	bne.n	e52 <_ZN7TwoWire9onServiceEv+0xb8>
          sercom->prepareNackBitWIRE(); 
     e44:	f000 f95f 	bl	1106 <_ZN6SERCOM18prepareNackBitWIREEv>
        sercom->prepareCommandBitsWire(0x03);
     e48:	2103      	movs	r1, #3
     e4a:	6920      	ldr	r0, [r4, #16]
     e4c:	f000 f96e 	bl	112c <_ZN6SERCOM22prepareCommandBitsWireEh>
}
     e50:	e7d3      	b.n	dfa <_ZN7TwoWire9onServiceEv+0x60>
          rxBuffer.store_char(sercom->readDataWIRE());
     e52:	f000 f9b5 	bl	11c0 <_ZN6SERCOM12readDataWIREEv>
     e56:	0001      	movs	r1, r0
     e58:	0020      	movs	r0, r4
     e5a:	3018      	adds	r0, #24
     e5c:	f7ff ff66 	bl	d2c <_ZN11RingBufferNILi256EE10store_charEh>
          sercom->prepareAckBitWIRE(); 
     e60:	6920      	ldr	r0, [r4, #16]
     e62:	f000 f959 	bl	1118 <_ZN6SERCOM17prepareAckBitWIREEv>
     e66:	e7ef      	b.n	e48 <_ZN7TwoWire9onServiceEv+0xae>
    else if(sercom->isAddressMatch())  //Address Match
     e68:	6920      	ldr	r0, [r4, #16]
     e6a:	f000 f99f 	bl	11ac <_ZN6SERCOM14isAddressMatchEv>
     e6e:	2800      	cmp	r0, #0
     e70:	d1c4      	bne.n	dfc <_ZN7TwoWire9onServiceEv+0x62>
    else if(sercom->isDataReadyWIRE())
     e72:	6920      	ldr	r0, [r4, #16]
     e74:	f000 f98b 	bl	118e <_ZN6SERCOM15isDataReadyWIREEv>
     e78:	2800      	cmp	r0, #0
     e7a:	d0be      	beq.n	dfa <_ZN7TwoWire9onServiceEv+0x60>
      if (sercom->isMasterReadOperationWIRE())
     e7c:	6920      	ldr	r0, [r4, #16]
     e7e:	f000 f99a 	bl	11b6 <_ZN6SERCOM25isMasterReadOperationWIREEv>
     e82:	2800      	cmp	r0, #0
     e84:	d0d5      	beq.n	e32 <_ZN7TwoWire9onServiceEv+0x98>
  int delta = _iHead - _iTail;
     e86:	2387      	movs	r3, #135	; 0x87
     e88:	009b      	lsls	r3, r3, #2
     e8a:	18e2      	adds	r2, r4, r3
     e8c:	6853      	ldr	r3, [r2, #4]
     e8e:	6892      	ldr	r2, [r2, #8]
     e90:	1a9b      	subs	r3, r3, r2
  if(delta < 0)
     e92:	d501      	bpl.n	e98 <_ZN7TwoWire9onServiceEv+0xfe>
    return N + delta;
     e94:	3301      	adds	r3, #1
     e96:	33ff      	adds	r3, #255	; 0xff
        uint8_t c = 0xff;
     e98:	21ff      	movs	r1, #255	; 0xff
        if( txBuffer.available() ) {
     e9a:	2b00      	cmp	r3, #0
     e9c:	d005      	beq.n	eaa <_ZN7TwoWire9onServiceEv+0x110>
     e9e:	0020      	movs	r0, r4
     ea0:	3021      	adds	r0, #33	; 0x21
     ea2:	30ff      	adds	r0, #255	; 0xff
          c = txBuffer.read_char();
     ea4:	f7ff ff64 	bl	d70 <_ZN11RingBufferNILi256EE9read_charEv>
     ea8:	b2c1      	uxtb	r1, r0
        transmissionBegun = sercom->sendDataSlaveWIRE(c);
     eaa:	6920      	ldr	r0, [r4, #16]
     eac:	f000 f95a 	bl	1164 <_ZN6SERCOM17sendDataSlaveWIREEh>
     eb0:	75a0      	strb	r0, [r4, #22]
     eb2:	e7a2      	b.n	dfa <_ZN7TwoWire9onServiceEv+0x60>

00000eb4 <SERCOM0_Handler>:
    #define PERIPH_WIRE          sercom3
    #define WIRE_IT_HANDLER      SERCOM3_Handler
  #endif // PERIPH_WIRE
  TwoWire Wire(&PERIPH_WIRE, PIN_WIRE_SDA, PIN_WIRE_SCL);

  void WIRE_IT_HANDLER(void) {
     eb4:	b510      	push	{r4, lr}
    Wire.onService();
     eb6:	4802      	ldr	r0, [pc, #8]	; (ec0 <SERCOM0_Handler+0xc>)
     eb8:	f7ff ff6f 	bl	d9a <_ZN7TwoWire9onServiceEv>
  }
     ebc:	bd10      	pop	{r4, pc}
     ebe:	46c0      	nop			; (mov r8, r8)
     ec0:	2000005c 	.word	0x2000005c

00000ec4 <_GLOBAL__sub_I__ZN7TwoWireC2EP6SERCOMhh>:
     ec4:	b510      	push	{r4, lr}
  TwoWire Wire(&PERIPH_WIRE, PIN_WIRE_SDA, PIN_WIRE_SCL);
     ec6:	230f      	movs	r3, #15
     ec8:	220e      	movs	r2, #14
     eca:	4902      	ldr	r1, [pc, #8]	; (ed4 <_GLOBAL__sub_I__ZN7TwoWireC2EP6SERCOMhh+0x10>)
     ecc:	4802      	ldr	r0, [pc, #8]	; (ed8 <_GLOBAL__sub_I__ZN7TwoWireC2EP6SERCOMhh+0x14>)
     ece:	f7ff fedd 	bl	c8c <_ZN7TwoWireC1EP6SERCOMhh>
  }
     ed2:	bd10      	pop	{r4, pc}
     ed4:	2000034c 	.word	0x2000034c
     ed8:	2000005c 	.word	0x2000005c

00000edc <SERCOM3_Handler>:
//SERCOM sercom4( SERCOM4 ) ;
//SERCOM sercom5( SERCOM5 ) ;

Uart Serial( &sercom3, PIN_SERIAL_RX, PIN_SERIAL_TX, PAD_SERIAL_RX, PAD_SERIAL_TX ) ;
void SERCOM3_Handler()
{
     edc:	b510      	push	{r4, lr}
  Serial.IrqHandler();
     ede:	4802      	ldr	r0, [pc, #8]	; (ee8 <SERCOM3_Handler+0xc>)
     ee0:	f7ff fc14 	bl	70c <_ZN4Uart10IrqHandlerEv>
}
     ee4:	bd10      	pop	{r4, pc}
     ee6:	46c0      	nop			; (mov r8, r8)
     ee8:	20000290 	.word	0x20000290

00000eec <_GLOBAL__sub_I_g_APinDescription>:
     eec:	b513      	push	{r0, r1, r4, lr}
SERCOM sercom0( SERCOM0 ) ;
     eee:	490d      	ldr	r1, [pc, #52]	; (f24 <_GLOBAL__sub_I_g_APinDescription+0x38>)
     ef0:	480d      	ldr	r0, [pc, #52]	; (f28 <_GLOBAL__sub_I_g_APinDescription+0x3c>)
     ef2:	f000 f829 	bl	f48 <_ZN6SERCOMC1EP6Sercom>
SERCOM sercom1( SERCOM1 ) ;
     ef6:	490d      	ldr	r1, [pc, #52]	; (f2c <_GLOBAL__sub_I_g_APinDescription+0x40>)
     ef8:	480d      	ldr	r0, [pc, #52]	; (f30 <_GLOBAL__sub_I_g_APinDescription+0x44>)
     efa:	f000 f825 	bl	f48 <_ZN6SERCOMC1EP6Sercom>
SERCOM sercom2( SERCOM2 ) ;
     efe:	490d      	ldr	r1, [pc, #52]	; (f34 <_GLOBAL__sub_I_g_APinDescription+0x48>)
     f00:	480d      	ldr	r0, [pc, #52]	; (f38 <_GLOBAL__sub_I_g_APinDescription+0x4c>)
     f02:	f000 f821 	bl	f48 <_ZN6SERCOMC1EP6Sercom>
SERCOM sercom3( SERCOM3 ) ;
     f06:	4c0d      	ldr	r4, [pc, #52]	; (f3c <_GLOBAL__sub_I_g_APinDescription+0x50>)
     f08:	490d      	ldr	r1, [pc, #52]	; (f40 <_GLOBAL__sub_I_g_APinDescription+0x54>)
     f0a:	0020      	movs	r0, r4
     f0c:	f000 f81c 	bl	f48 <_ZN6SERCOMC1EP6Sercom>
Uart Serial( &sercom3, PIN_SERIAL_RX, PIN_SERIAL_TX, PAD_SERIAL_RX, PAD_SERIAL_TX ) ;
     f10:	2301      	movs	r3, #1
     f12:	2203      	movs	r2, #3
     f14:	9301      	str	r3, [sp, #4]
     f16:	9200      	str	r2, [sp, #0]
     f18:	0021      	movs	r1, r4
     f1a:	2200      	movs	r2, #0
     f1c:	4809      	ldr	r0, [pc, #36]	; (f44 <_GLOBAL__sub_I_g_APinDescription+0x58>)
     f1e:	f7ff fb9d 	bl	65c <_ZN4UartC1EP6SERCOMhh11SercomRXPad15SercomUartTXPad>
}
     f22:	bd13      	pop	{r0, r1, r4, pc}
     f24:	42000800 	.word	0x42000800
     f28:	2000034c 	.word	0x2000034c
     f2c:	42000c00 	.word	0x42000c00
     f30:	20000350 	.word	0x20000350
     f34:	42001000 	.word	0x42001000
     f38:	20000354 	.word	0x20000354
     f3c:	20000358 	.word	0x20000358
     f40:	42001400 	.word	0x42001400
     f44:	20000290 	.word	0x20000290

00000f48 <_ZN6SERCOMC1EP6Sercom>:
#define WIRE_RISE_TIME_NANOSECONDS 125
#endif

SERCOM::SERCOM(Sercom* s)
{
  sercom = s;
     f48:	6001      	str	r1, [r0, #0]
}
     f4a:	4770      	bx	lr

00000f4c <_ZN6SERCOM9initFrameE18SercomUartCharSize15SercomDataOrder16SercomParityMode19SercomNumberStopBit>:
    sercom->USART.BAUD.reg = (baudTimes8 / 8);
#endif /* SAMD20 */
  }
}
void SERCOM::initFrame(SercomUartCharSize charSize, SercomDataOrder dataOrder, SercomParityMode parityMode, SercomNumberStopBit nbStopBits)
{
     f4c:	b5f0      	push	{r4, r5, r6, r7, lr}
     f4e:	ac05      	add	r4, sp, #20
     f50:	7825      	ldrb	r5, [r4, #0]
  //Setting the CTRLA register
  sercom->USART.CTRLA.reg |=	SERCOM_USART_CTRLA_FORM( (parityMode == SERCOM_NO_PARITY ? 0 : 1) ) |
     f52:	6804      	ldr	r4, [r0, #0]
     f54:	1e98      	subs	r0, r3, #2
     f56:	1e47      	subs	r7, r0, #1
     f58:	41b8      	sbcs	r0, r7
                dataOrder << SERCOM_USART_CTRLA_DORD_Pos;
     f5a:	6826      	ldr	r6, [r4, #0]
     f5c:	0792      	lsls	r2, r2, #30
  sercom->USART.CTRLA.reg |=	SERCOM_USART_CTRLA_FORM( (parityMode == SERCOM_NO_PARITY ? 0 : 1) ) |
     f5e:	0600      	lsls	r0, r0, #24
                dataOrder << SERCOM_USART_CTRLA_DORD_Pos;
     f60:	4332      	orrs	r2, r6
     f62:	4302      	orrs	r2, r0

  //Setting the CTRLB register
  sercom->USART.CTRLB.reg |=	SERCOM_USART_CTRLB_CHSIZE(charSize) |
     f64:	2007      	movs	r0, #7
  sercom->USART.CTRLA.reg |=	SERCOM_USART_CTRLA_FORM( (parityMode == SERCOM_NO_PARITY ? 0 : 1) ) |
     f66:	6022      	str	r2, [r4, #0]
  sercom->USART.CTRLB.reg |=	SERCOM_USART_CTRLB_CHSIZE(charSize) |
     f68:	4001      	ands	r1, r0
                nbStopBits << SERCOM_USART_CTRLB_SBMODE_Pos |
     f6a:	01ad      	lsls	r5, r5, #6
                (parityMode == SERCOM_NO_PARITY ? 0 : parityMode) << SERCOM_USART_CTRLB_PMODE_Pos; //If no parity use default value
     f6c:	6862      	ldr	r2, [r4, #4]
     f6e:	4329      	orrs	r1, r5
     f70:	2000      	movs	r0, #0
     f72:	2b02      	cmp	r3, #2
     f74:	d000      	beq.n	f78 <_ZN6SERCOM9initFrameE18SercomUartCharSize15SercomDataOrder16SercomParityMode19SercomNumberStopBit+0x2c>
     f76:	0358      	lsls	r0, r3, #13
     f78:	4311      	orrs	r1, r2
     f7a:	4301      	orrs	r1, r0
  sercom->USART.CTRLB.reg |=	SERCOM_USART_CTRLB_CHSIZE(charSize) |
     f7c:	6061      	str	r1, [r4, #4]
}
     f7e:	bdf0      	pop	{r4, r5, r6, r7, pc}

00000f80 <_ZN6SERCOM8initPadsE15SercomUartTXPad11SercomRXPad>:
#ifndef SAMD20
  sercom->USART.CTRLA.reg |=	SERCOM_USART_CTRLA_TXPO(txPad) |
                SERCOM_USART_CTRLA_RXPO(rxPad);
#else
    sercom->USART.CTRLA.reg |=	SERCOM_USART_CTRLA_TXPO | 
                SERCOM_USART_CTRLA_RXPO(rxPad);
     f80:	21c0      	movs	r1, #192	; 0xc0
     f82:	0512      	lsls	r2, r2, #20
     f84:	0389      	lsls	r1, r1, #14
     f86:	400a      	ands	r2, r1
     f88:	2180      	movs	r1, #128	; 0x80
    sercom->USART.CTRLA.reg |=	SERCOM_USART_CTRLA_TXPO | 
     f8a:	6803      	ldr	r3, [r0, #0]
                SERCOM_USART_CTRLA_RXPO(rxPad);
     f8c:	0249      	lsls	r1, r1, #9
     f8e:	6818      	ldr	r0, [r3, #0]
     f90:	4301      	orrs	r1, r0
     f92:	430a      	orrs	r2, r1
    sercom->USART.CTRLA.reg |=	SERCOM_USART_CTRLA_TXPO | 
     f94:	601a      	str	r2, [r3, #0]
#endif /* SAMD20 */

  // Enable Transceiver and Receiver
  sercom->USART.CTRLB.reg |= SERCOM_USART_CTRLB_TXEN | SERCOM_USART_CTRLB_RXEN ;
     f96:	22c0      	movs	r2, #192	; 0xc0
     f98:	6859      	ldr	r1, [r3, #4]
     f9a:	0292      	lsls	r2, r2, #10
     f9c:	430a      	orrs	r2, r1
     f9e:	605a      	str	r2, [r3, #4]
}
     fa0:	4770      	bx	lr

00000fa2 <_ZN6SERCOM9resetUARTEv>:

void SERCOM::resetUART()
{
  // Start the Software Reset
  sercom->USART.CTRLA.bit.SWRST = 1;
     fa2:	2201      	movs	r2, #1
     fa4:	6803      	ldr	r3, [r0, #0]
     fa6:	6819      	ldr	r1, [r3, #0]
     fa8:	430a      	orrs	r2, r1
     faa:	601a      	str	r2, [r3, #0]

#ifndef SAMD20
  while ( sercom->USART.CTRLA.bit.SWRST || sercom->USART.SYNCBUSY.bit.SWRST )
#else
  while ( sercom->USART.CTRLA.bit.SWRST || sercom->USART.STATUS.bit.SYNCBUSY )
     fac:	681a      	ldr	r2, [r3, #0]
     fae:	07d2      	lsls	r2, r2, #31
     fb0:	d4fc      	bmi.n	fac <_ZN6SERCOM9resetUARTEv+0xa>
     fb2:	8a1a      	ldrh	r2, [r3, #16]
     fb4:	0bd2      	lsrs	r2, r2, #15
     fb6:	d1f9      	bne.n	fac <_ZN6SERCOM9resetUARTEv+0xa>
#endif /* SAMD20 */
  {
    // Wait for both bits Software Reset from CTRLA and SYNCBUSY coming back to 0
  }
}
     fb8:	4770      	bx	lr

00000fba <_ZN6SERCOM10enableUARTEv>:

void SERCOM::enableUART()
{
  //Setting  the enable bit to 1
  sercom->USART.CTRLA.bit.ENABLE = 0x1u;
     fba:	2302      	movs	r3, #2
     fbc:	6802      	ldr	r2, [r0, #0]
     fbe:	6811      	ldr	r1, [r2, #0]
     fc0:	430b      	orrs	r3, r1
     fc2:	6013      	str	r3, [r2, #0]
#ifndef SAMD20
  //Wait for then enable bit from SYNCBUSY is equal to 0;
  while(sercom->USART.SYNCBUSY.bit.ENABLE);
#else
  //Wait for the clocks to sync
  while ( sercom->USART.STATUS.bit.SYNCBUSY );
     fc4:	8a13      	ldrh	r3, [r2, #16]
     fc6:	0bdb      	lsrs	r3, r3, #15
     fc8:	d1fc      	bne.n	fc4 <_ZN6SERCOM10enableUARTEv+0xa>
#endif /* SAMD20 */
}
     fca:	4770      	bx	lr

00000fcc <_ZN6SERCOM9flushUARTEv>:
}

bool SERCOM::isDataRegisterEmptyUART()
{
  //DRE : Data Register Empty
  return sercom->USART.INTFLAG.bit.DRE;
     fcc:	6803      	ldr	r3, [r0, #0]
     fce:	7b9a      	ldrb	r2, [r3, #14]
  if(isDataRegisterEmptyUART())
     fd0:	07d2      	lsls	r2, r2, #31
     fd2:	d402      	bmi.n	fda <_ZN6SERCOM9flushUARTEv+0xe>
  while(!sercom->USART.INTFLAG.bit.TXC);
     fd4:	7b9a      	ldrb	r2, [r3, #14]
     fd6:	0792      	lsls	r2, r2, #30
     fd8:	d5fc      	bpl.n	fd4 <_ZN6SERCOM9flushUARTEv+0x8>
}
     fda:	4770      	bx	lr

00000fdc <_ZN6SERCOM15clearStatusUARTEv>:
  sercom->USART.STATUS.reg = SERCOM_USART_STATUS_RESETVALUE;
     fdc:	2200      	movs	r2, #0
     fde:	6803      	ldr	r3, [r0, #0]
     fe0:	821a      	strh	r2, [r3, #16]
}
     fe2:	4770      	bx	lr

00000fe4 <_ZN6SERCOM17availableDataUARTEv>:
  return sercom->USART.INTFLAG.bit.RXC;
     fe4:	6803      	ldr	r3, [r0, #0]
     fe6:	7b98      	ldrb	r0, [r3, #14]
     fe8:	0740      	lsls	r0, r0, #29
     fea:	0fc0      	lsrs	r0, r0, #31
}
     fec:	4770      	bx	lr

00000fee <_ZN6SERCOM11isUARTErrorEv>:
        sercom->USART.STATUS.reg & (SERCOM_USART_STATUS_BUFOVF 
     fee:	6803      	ldr	r3, [r0, #0]
     ff0:	8a18      	ldrh	r0, [r3, #16]
          | SERCOM_USART_STATUS_FERR | SERCOM_USART_STATUS_PERR);
     ff2:	2307      	movs	r3, #7
     ff4:	4018      	ands	r0, r3
     ff6:	1e43      	subs	r3, r0, #1
     ff8:	4198      	sbcs	r0, r3
  return rtn;
     ffa:	b2c0      	uxtb	r0, r0
}
     ffc:	4770      	bx	lr

00000ffe <_ZN6SERCOM20acknowledgeUARTErrorEv>:
  return sercom->USART.STATUS.bit.BUFOVF;
     ffe:	6803      	ldr	r3, [r0, #0]
    1000:	8a1a      	ldrh	r2, [r3, #16]
  if( isBufferOverflowErrorUART() )
    1002:	0752      	lsls	r2, r2, #29
    1004:	d503      	bpl.n	100e <_ZN6SERCOM20acknowledgeUARTErrorEv+0x10>
    sercom->USART.STATUS.reg |= SERCOM_USART_STATUS_BUFOVF;
    1006:	2204      	movs	r2, #4
    1008:	8a19      	ldrh	r1, [r3, #16]
    100a:	430a      	orrs	r2, r1
    100c:	821a      	strh	r2, [r3, #16]
  return sercom->USART.STATUS.bit.FERR;
    100e:	8a1a      	ldrh	r2, [r3, #16]
  if( isFrameErrorUART() )
    1010:	0792      	lsls	r2, r2, #30
    1012:	d503      	bpl.n	101c <_ZN6SERCOM20acknowledgeUARTErrorEv+0x1e>
    sercom->USART.STATUS.reg |= SERCOM_USART_STATUS_FERR;
    1014:	2202      	movs	r2, #2
    1016:	8a19      	ldrh	r1, [r3, #16]
    1018:	430a      	orrs	r2, r1
    101a:	821a      	strh	r2, [r3, #16]
  return sercom->USART.STATUS.bit.PERR;
    101c:	8a1a      	ldrh	r2, [r3, #16]
  if( isParityErrorUART() )
    101e:	07d2      	lsls	r2, r2, #31
    1020:	d503      	bpl.n	102a <_ZN6SERCOM20acknowledgeUARTErrorEv+0x2c>
    sercom->USART.STATUS.reg |= SERCOM_USART_STATUS_PERR;
    1022:	2201      	movs	r2, #1
    1024:	8a19      	ldrh	r1, [r3, #16]
    1026:	430a      	orrs	r2, r1
    1028:	821a      	strh	r2, [r3, #16]
}
    102a:	4770      	bx	lr

0000102c <_ZN6SERCOM23isDataRegisterEmptyUARTEv>:
  return sercom->USART.INTFLAG.bit.DRE;
    102c:	6803      	ldr	r3, [r0, #0]
    102e:	7b98      	ldrb	r0, [r3, #14]
    1030:	07c0      	lsls	r0, r0, #31
    1032:	0fc0      	lsrs	r0, r0, #31
}
    1034:	4770      	bx	lr

00001036 <_ZN6SERCOM12readDataUARTEv>:

uint8_t SERCOM::readDataUART()
{
  return sercom->USART.DATA.bit.DATA;
    1036:	6803      	ldr	r3, [r0, #0]
    1038:	8b18      	ldrh	r0, [r3, #24]
    103a:	b2c0      	uxtb	r0, r0
}
    103c:	4770      	bx	lr

0000103e <_ZN6SERCOM13writeDataUARTEh>:
  return sercom->USART.INTFLAG.bit.DRE;
    103e:	6803      	ldr	r3, [r0, #0]
    1040:	7b9a      	ldrb	r2, [r3, #14]

int SERCOM::writeDataUART(uint8_t data)
{
  // Wait for data register to be empty
  while(!isDataRegisterEmptyUART());
    1042:	07d2      	lsls	r2, r2, #31
    1044:	d5fc      	bpl.n	1040 <_ZN6SERCOM13writeDataUARTEh+0x2>

  //Put data into DATA register
  sercom->USART.DATA.reg = (uint16_t)data;
    1046:	b289      	uxth	r1, r1
  return 1;
}
    1048:	2001      	movs	r0, #1
  sercom->USART.DATA.reg = (uint16_t)data;
    104a:	8319      	strh	r1, [r3, #24]
}
    104c:	4770      	bx	lr

0000104e <_ZN6SERCOM36enableDataRegisterEmptyInterruptUARTEv>:

void SERCOM::enableDataRegisterEmptyInterruptUART()
{
  sercom->USART.INTENSET.reg = SERCOM_USART_INTENSET_DRE;
    104e:	2201      	movs	r2, #1
    1050:	6803      	ldr	r3, [r0, #0]
    1052:	735a      	strb	r2, [r3, #13]
}
    1054:	4770      	bx	lr

00001056 <_ZN6SERCOM37disableDataRegisterEmptyInterruptUARTEv>:

void SERCOM::disableDataRegisterEmptyInterruptUART()
{
  sercom->USART.INTENCLR.reg = SERCOM_USART_INTENCLR_DRE;
    1056:	2201      	movs	r2, #1
    1058:	6803      	ldr	r3, [r0, #0]
    105a:	731a      	strb	r2, [r3, #12]
}
    105c:	4770      	bx	lr
	...

00001060 <_ZN6SERCOM12initSPIClockE18SercomSpiClockModem>:


}

void SERCOM::initSPIClock(SercomSpiClockMode clockMode, uint32_t baudrate)
{
    1060:	b570      	push	{r4, r5, r6, lr}
  if((clockMode & (0x1ul)) == 0 )
    cpha = 0;
  else
    cpha = 1;

  if((clockMode & (0x2ul)) == 0)
    1062:	2501      	movs	r5, #1
    cpol = 0;
  else
    cpol = 1;

  //Setting the CTRLA register
  sercom->SPI.CTRLA.reg |=	( cpha << SERCOM_SPI_CTRLA_CPHA_Pos ) |
    1064:	6804      	ldr	r4, [r0, #0]
  if((clockMode & (0x2ul)) == 0)
    1066:	084b      	lsrs	r3, r1, #1
    1068:	402b      	ands	r3, r5
    cpha = 0;
    106a:	4029      	ands	r1, r5
                            ( cpol << SERCOM_SPI_CTRLA_CPOL_Pos );
    106c:	6820      	ldr	r0, [r4, #0]
  sercom->SPI.CTRLA.reg |=	( cpha << SERCOM_SPI_CTRLA_CPHA_Pos ) |
    106e:	0709      	lsls	r1, r1, #28
                            ( cpol << SERCOM_SPI_CTRLA_CPOL_Pos );
    1070:	075b      	lsls	r3, r3, #29
  sercom->SPI.CTRLA.reg |=	( cpha << SERCOM_SPI_CTRLA_CPHA_Pos ) |
    1072:	430b      	orrs	r3, r1
                            ( cpol << SERCOM_SPI_CTRLA_CPOL_Pos );
    1074:	4303      	orrs	r3, r0
  sercom->SPI.CTRLA.reg |=	( cpha << SERCOM_SPI_CTRLA_CPHA_Pos ) |
    1076:	6023      	str	r3, [r4, #0]
//	return sercom->SPI.INTFLAG.bit.RXC;
//}

uint8_t SERCOM::calculateBaudrateSynchronous(uint32_t baudrate)
{
  return SERCOM_FREQ_REF / (2 * baudrate) - 1;
    1078:	0051      	lsls	r1, r2, #1
    107a:	4803      	ldr	r0, [pc, #12]	; (1088 <_ZN6SERCOM12initSPIClockE18SercomSpiClockModem+0x28>)
    107c:	f000 f966 	bl	134c <__udivsi3>
    1080:	3801      	subs	r0, #1
    1082:	b2c0      	uxtb	r0, r0
  sercom->SPI.BAUD.reg = calculateBaudrateSynchronous(baudrate);
    1084:	72a0      	strb	r0, [r4, #10]
}
    1086:	bd70      	pop	{r4, r5, r6, pc}
    1088:	02dc6c00 	.word	0x02dc6c00

0000108c <_ZN6SERCOM8resetSPIEv>:
  sercom->SPI.CTRLA.bit.SWRST = 1;
    108c:	2201      	movs	r2, #1
    108e:	6803      	ldr	r3, [r0, #0]
    1090:	6819      	ldr	r1, [r3, #0]
    1092:	430a      	orrs	r2, r1
    1094:	601a      	str	r2, [r3, #0]
  while(sercom->SPI.CTRLA.bit.SWRST || sercom->SPI.STATUS.bit.SYNCBUSY);
    1096:	681a      	ldr	r2, [r3, #0]
    1098:	07d2      	lsls	r2, r2, #31
    109a:	d4fc      	bmi.n	1096 <_ZN6SERCOM8resetSPIEv+0xa>
    109c:	8a1a      	ldrh	r2, [r3, #16]
    109e:	0bd2      	lsrs	r2, r2, #15
    10a0:	d1f9      	bne.n	1096 <_ZN6SERCOM8resetSPIEv+0xa>
}
    10a2:	4770      	bx	lr

000010a4 <_ZN6SERCOM9enableSPIEv>:
  sercom->SPI.CTRLA.bit.ENABLE = 1;
    10a4:	2302      	movs	r3, #2
    10a6:	6802      	ldr	r2, [r0, #0]
    10a8:	6811      	ldr	r1, [r2, #0]
    10aa:	430b      	orrs	r3, r1
    10ac:	6013      	str	r3, [r2, #0]
  while(sercom->SPI.STATUS.bit.SYNCBUSY)
    10ae:	8a13      	ldrh	r3, [r2, #16]
    10b0:	0bdb      	lsrs	r3, r3, #15
    10b2:	d1fc      	bne.n	10ae <_ZN6SERCOM9enableSPIEv+0xa>
}
    10b4:	4770      	bx	lr

000010b6 <_ZN6SERCOM10disableSPIEv>:
  while(sercom->SPI.STATUS.bit.SYNCBUSY)
    10b6:	6803      	ldr	r3, [r0, #0]
    10b8:	8a1a      	ldrh	r2, [r3, #16]
    10ba:	0bd2      	lsrs	r2, r2, #15
    10bc:	d1fc      	bne.n	10b8 <_ZN6SERCOM10disableSPIEv+0x2>
  sercom->SPI.CTRLA.bit.ENABLE = 0;
    10be:	2102      	movs	r1, #2
    10c0:	681a      	ldr	r2, [r3, #0]
    10c2:	438a      	bics	r2, r1
    10c4:	601a      	str	r2, [r3, #0]
}
    10c6:	4770      	bx	lr

000010c8 <_ZN6SERCOM9resetWIREEv>:
void SERCOM::resetWIRE()
{
  //I2CM OR I2CS, no matter SWRST is the same bit.

  //Setting the Software bit to 1
  sercom->I2CM.CTRLA.bit.SWRST = 1;
    10c8:	2201      	movs	r2, #1
    10ca:	6803      	ldr	r3, [r0, #0]
    10cc:	6819      	ldr	r1, [r3, #0]
    10ce:	430a      	orrs	r2, r1
    10d0:	601a      	str	r2, [r3, #0]

#ifndef SAMD20
  //Wait both bits Software Reset from CTRLA and SYNCBUSY are equal to 0
  while(sercom->I2CM.CTRLA.bit.SWRST || sercom->I2CM.SYNCBUSY.bit.SWRST);
#else
  while(sercom->I2CM.CTRLA.bit.SWRST || sercom->I2CM.STATUS.bit.SYNCBUSY);
    10d2:	681a      	ldr	r2, [r3, #0]
    10d4:	07d2      	lsls	r2, r2, #31
    10d6:	d4fc      	bmi.n	10d2 <_ZN6SERCOM9resetWIREEv+0xa>
    10d8:	8a1a      	ldrh	r2, [r3, #16]
    10da:	0bd2      	lsrs	r2, r2, #15
    10dc:	d1f9      	bne.n	10d2 <_ZN6SERCOM9resetWIREEv+0xa>
#endif /* SAMD20 */
}
    10de:	4770      	bx	lr

000010e0 <_ZN6SERCOM10enableWIREEv>:
void SERCOM::enableWIRE()
{
  // I2C Master and Slave modes share the ENABLE bit function.

  // Enable the I2C master mode
  sercom->I2CM.CTRLA.bit.ENABLE = 1 ;
    10e0:	2202      	movs	r2, #2
    10e2:	6803      	ldr	r3, [r0, #0]
    10e4:	6819      	ldr	r1, [r3, #0]
    10e6:	430a      	orrs	r2, r1
    10e8:	601a      	str	r2, [r3, #0]

#ifndef SAMD20
  while ( sercom->I2CM.SYNCBUSY.bit.ENABLE != 0 )
#else
  while(sercom->I2CM.STATUS.bit.SYNCBUSY)
    10ea:	8a1a      	ldrh	r2, [r3, #16]
    10ec:	0bd2      	lsrs	r2, r2, #15
    10ee:	d1fc      	bne.n	10ea <_ZN6SERCOM10enableWIREEv+0xa>
  {
    // Waiting the enable bit from SYNCBUSY is equal to 0;
  }

  // Setting bus idle mode
  sercom->I2CM.STATUS.bit.BUSSTATE = 1 ;
    10f0:	2130      	movs	r1, #48	; 0x30
    10f2:	8a1a      	ldrh	r2, [r3, #16]
    10f4:	438a      	bics	r2, r1
    10f6:	0011      	movs	r1, r2
    10f8:	2210      	movs	r2, #16
    10fa:	430a      	orrs	r2, r1
    10fc:	821a      	strh	r2, [r3, #16]

#ifndef SAMD20
  while ( sercom->I2CM.SYNCBUSY.bit.SYSOP != 0 )
#else
  while(sercom->I2CM.STATUS.bit.SYNCBUSY)
    10fe:	8a1a      	ldrh	r2, [r3, #16]
    1100:	0bd2      	lsrs	r2, r2, #15
    1102:	d1fc      	bne.n	10fe <_ZN6SERCOM10enableWIREEv+0x1e>
#endif /* SAMD20 */
  {
    // Wait the SYSOP bit from SYNCBUSY coming back to 0
  }
}
    1104:	4770      	bx	lr

00001106 <_ZN6SERCOM18prepareNackBitWIREEv>:
  // Synchronous arithmetic baudrate
  sercom->I2CM.BAUD.bit.BAUD = SystemCoreClock / ( 2 * baudrate) - 5 - (((SystemCoreClock / 1000000) * WIRE_RISE_TIME_NANOSECONDS) / (2 * 1000));
}

void SERCOM::prepareNackBitWIRE( void )
{
    1106:	2380      	movs	r3, #128	; 0x80
    return true;
}

bool SERCOM::isMasterWIRE( void )
{
  return sercom->I2CS.CTRLA.bit.MODE == I2C_MASTER_OPERATION;
    1108:	6802      	ldr	r2, [r0, #0]
    110a:	02db      	lsls	r3, r3, #11
    110c:	6811      	ldr	r1, [r2, #0]
    sercom->I2CS.CTRLB.bit.ACKACT = 1;
    110e:	6851      	ldr	r1, [r2, #4]
    1110:	430b      	orrs	r3, r1
    1112:	6053      	str	r3, [r2, #4]
}
    1114:	4770      	bx	lr
	...

00001118 <_ZN6SERCOM17prepareAckBitWIREEv>:
  return sercom->I2CS.CTRLA.bit.MODE == I2C_MASTER_OPERATION;
    1118:	6803      	ldr	r3, [r0, #0]
    111a:	4903      	ldr	r1, [pc, #12]	; (1128 <_ZN6SERCOM17prepareAckBitWIREEv+0x10>)
    111c:	681a      	ldr	r2, [r3, #0]
    sercom->I2CS.CTRLB.bit.ACKACT = 0;
    111e:	685a      	ldr	r2, [r3, #4]
    1120:	400a      	ands	r2, r1
    1122:	605a      	str	r2, [r3, #4]
}
    1124:	4770      	bx	lr
    1126:	46c0      	nop			; (mov r8, r8)
    1128:	fffbffff 	.word	0xfffbffff

0000112c <_ZN6SERCOM22prepareCommandBitsWireEh>:
  return sercom->I2CS.CTRLA.bit.MODE == I2C_MASTER_OPERATION;
    112c:	6803      	ldr	r3, [r0, #0]
{
    112e:	b510      	push	{r4, lr}
  return sercom->I2CS.CTRLA.bit.MODE == I2C_MASTER_OPERATION;
    1130:	6818      	ldr	r0, [r3, #0]
    1132:	2203      	movs	r2, #3
    1134:	06c0      	lsls	r0, r0, #27
    1136:	0f40      	lsrs	r0, r0, #29
    1138:	4c09      	ldr	r4, [pc, #36]	; (1160 <_ZN6SERCOM22prepareCommandBitsWireEh+0x34>)
  if(isMasterWIRE()) {
    113a:	2805      	cmp	r0, #5
    113c:	d109      	bne.n	1152 <_ZN6SERCOM22prepareCommandBitsWireEh+0x26>
    sercom->I2CM.CTRLB.bit.CMD = cmd;
    113e:	6858      	ldr	r0, [r3, #4]
    1140:	4011      	ands	r1, r2
    1142:	0409      	lsls	r1, r1, #16
    1144:	4020      	ands	r0, r4
    1146:	4301      	orrs	r1, r0
    1148:	6059      	str	r1, [r3, #4]
    while(sercom->I2CM.STATUS.bit.SYNCBUSY)
    114a:	8a1a      	ldrh	r2, [r3, #16]
    114c:	0bd2      	lsrs	r2, r2, #15
    114e:	d1fc      	bne.n	114a <_ZN6SERCOM22prepareCommandBitsWireEh+0x1e>
}
    1150:	bd10      	pop	{r4, pc}
    sercom->I2CS.CTRLB.bit.CMD = cmd;
    1152:	6858      	ldr	r0, [r3, #4]
    1154:	4011      	ands	r1, r2
    1156:	0409      	lsls	r1, r1, #16
    1158:	4020      	ands	r0, r4
    115a:	4301      	orrs	r1, r0
    115c:	6059      	str	r1, [r3, #4]
}
    115e:	e7f7      	b.n	1150 <_ZN6SERCOM22prepareCommandBitsWireEh+0x24>
    1160:	fffcffff 	.word	0xfffcffff

00001164 <_ZN6SERCOM17sendDataSlaveWIREEh>:
  sercom->I2CS.DATA.bit.DATA = data;
    1164:	6803      	ldr	r3, [r0, #0]
    return false;
    1166:	2000      	movs	r0, #0
  sercom->I2CS.DATA.bit.DATA = data;
    1168:	7619      	strb	r1, [r3, #24]
  if(!sercom->I2CS.INTFLAG.bit.DRDY || sercom->I2CS.STATUS.bit.RXNACK)
    116a:	7b9a      	ldrb	r2, [r3, #14]
    116c:	0752      	lsls	r2, r2, #29
    116e:	d504      	bpl.n	117a <_ZN6SERCOM17sendDataSlaveWIREEh+0x16>
    1170:	8a18      	ldrh	r0, [r3, #16]
    1172:	2301      	movs	r3, #1
    1174:	0740      	lsls	r0, r0, #29
    1176:	0fc0      	lsrs	r0, r0, #31
    1178:	4058      	eors	r0, r3
}
    117a:	4770      	bx	lr

0000117c <_ZN6SERCOM11isSlaveWIREEv>:
}

bool SERCOM::isSlaveWIRE( void )
{
  return sercom->I2CS.CTRLA.bit.MODE == I2C_SLAVE_OPERATION;
    117c:	6803      	ldr	r3, [r0, #0]
    117e:	6818      	ldr	r0, [r3, #0]
    1180:	06c0      	lsls	r0, r0, #27
    1182:	0f40      	lsrs	r0, r0, #29
    1184:	3804      	subs	r0, #4
    1186:	4243      	negs	r3, r0
    1188:	4158      	adcs	r0, r3
    118a:	b2c0      	uxtb	r0, r0
}
    118c:	4770      	bx	lr

0000118e <_ZN6SERCOM15isDataReadyWIREEv>:
  return sercom->I2CM.STATUS.bit.BUSSTATE == WIRE_OWNER_STATE;
}

bool SERCOM::isDataReadyWIRE( void )
{
  return sercom->I2CS.INTFLAG.bit.DRDY;
    118e:	6803      	ldr	r3, [r0, #0]
    1190:	7b98      	ldrb	r0, [r3, #14]
    1192:	0740      	lsls	r0, r0, #29
    1194:	0fc0      	lsrs	r0, r0, #31
}
    1196:	4770      	bx	lr

00001198 <_ZN6SERCOM18isStopDetectedWIREEv>:

bool SERCOM::isStopDetectedWIRE( void )
{
  return sercom->I2CS.INTFLAG.bit.PREC;
    1198:	6803      	ldr	r3, [r0, #0]
    119a:	7b98      	ldrb	r0, [r3, #14]
    119c:	07c0      	lsls	r0, r0, #31
    119e:	0fc0      	lsrs	r0, r0, #31
}
    11a0:	4770      	bx	lr

000011a2 <_ZN6SERCOM21isRestartDetectedWIREEv>:

bool SERCOM::isRestartDetectedWIRE( void )
{
  return sercom->I2CS.STATUS.bit.SR;
    11a2:	6803      	ldr	r3, [r0, #0]
    11a4:	8a18      	ldrh	r0, [r3, #16]
    11a6:	06c0      	lsls	r0, r0, #27
    11a8:	0fc0      	lsrs	r0, r0, #31
}
    11aa:	4770      	bx	lr

000011ac <_ZN6SERCOM14isAddressMatchEv>:

bool SERCOM::isAddressMatch( void )
{
  return sercom->I2CS.INTFLAG.bit.AMATCH;
    11ac:	6803      	ldr	r3, [r0, #0]
    11ae:	7b98      	ldrb	r0, [r3, #14]
    11b0:	0780      	lsls	r0, r0, #30
    11b2:	0fc0      	lsrs	r0, r0, #31
}
    11b4:	4770      	bx	lr

000011b6 <_ZN6SERCOM25isMasterReadOperationWIREEv>:

bool SERCOM::isMasterReadOperationWIRE( void )
{
  return sercom->I2CS.STATUS.bit.DIR;
    11b6:	6803      	ldr	r3, [r0, #0]
    11b8:	8a18      	ldrh	r0, [r3, #16]
    11ba:	0700      	lsls	r0, r0, #28
    11bc:	0fc0      	lsrs	r0, r0, #31
}
    11be:	4770      	bx	lr

000011c0 <_ZN6SERCOM12readDataWIREEv>:
  return sercom->I2CS.CTRLA.bit.MODE == I2C_MASTER_OPERATION;
    11c0:	6802      	ldr	r2, [r0, #0]
    11c2:	6813      	ldr	r3, [r2, #0]
    11c4:	06db      	lsls	r3, r3, #27
    11c6:	0f5b      	lsrs	r3, r3, #29
    return sercom->I2CS.INTFLAG.bit.DRDY;
}

uint8_t SERCOM::readDataWIRE( void )
{
  if(isMasterWIRE())
    11c8:	2b05      	cmp	r3, #5
    11ca:	d102      	bne.n	11d2 <_ZN6SERCOM12readDataWIREEv+0x12>
  {
    while( sercom->I2CM.INTFLAG.bit.SB == 0 )
    11cc:	7b93      	ldrb	r3, [r2, #14]
    11ce:	079b      	lsls	r3, r3, #30
    11d0:	d5fc      	bpl.n	11cc <_ZN6SERCOM12readDataWIREEv+0xc>

    return sercom->I2CM.DATA.bit.DATA ;
  }
  else
  {
    return sercom->I2CS.DATA.reg ;
    11d2:	7e10      	ldrb	r0, [r2, #24]
    11d4:	b2c0      	uxtb	r0, r0
  }
}
    11d6:	4770      	bx	lr

000011d8 <_ZN6SERCOM13initClockNVICEv>:
void SERCOM::initClockNVIC( void )
{
  uint8_t clockId = 0;
  IRQn_Type IdNvic=PendSV_IRQn ; // Dummy init to intercept potential error later

  if(sercom == SERCOM0)
    11d8:	6803      	ldr	r3, [r0, #0]
    11da:	4a1b      	ldr	r2, [pc, #108]	; (1248 <_ZN6SERCOM13initClockNVICEv+0x70>)
{
    11dc:	b530      	push	{r4, r5, lr}
  if(sercom == SERCOM0)
    11de:	4293      	cmp	r3, r2
    11e0:	d00b      	beq.n	11fa <_ZN6SERCOM13initClockNVICEv+0x22>
  {
    clockId = GCM_SERCOM0_CORE;
    IdNvic = SERCOM0_IRQn;
  }
  else if(sercom == SERCOM1)
    11e2:	4a1a      	ldr	r2, [pc, #104]	; (124c <_ZN6SERCOM13initClockNVICEv+0x74>)
    11e4:	4293      	cmp	r3, r2
    11e6:	d029      	beq.n	123c <_ZN6SERCOM13initClockNVICEv+0x64>
  {
    clockId = GCM_SERCOM1_CORE;
    IdNvic = SERCOM1_IRQn;
  }
  else if(sercom == SERCOM2)
    11e8:	4a19      	ldr	r2, [pc, #100]	; (1250 <_ZN6SERCOM13initClockNVICEv+0x78>)
    11ea:	4293      	cmp	r3, r2
    11ec:	d029      	beq.n	1242 <_ZN6SERCOM13initClockNVICEv+0x6a>
  {
    clockId = GCM_SERCOM2_CORE;
    IdNvic = SERCOM2_IRQn;
  }
  else if(sercom == SERCOM3)
    11ee:	4a19      	ldr	r2, [pc, #100]	; (1254 <_ZN6SERCOM13initClockNVICEv+0x7c>)
    11f0:	4293      	cmp	r3, r2
    11f2:	d122      	bne.n	123a <_ZN6SERCOM13initClockNVICEv+0x62>
  {
    clockId = GCM_SERCOM3_CORE;
    IdNvic = SERCOM3_IRQn;
    11f4:	230a      	movs	r3, #10
    clockId = GCM_SERCOM3_CORE;
    11f6:	2017      	movs	r0, #23
    11f8:	e001      	b.n	11fe <_ZN6SERCOM13initClockNVICEv+0x26>
    IdNvic = SERCOM0_IRQn;
    11fa:	2307      	movs	r3, #7
    clockId = GCM_SERCOM0_CORE;
    11fc:	2014      	movs	r0, #20
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    11fe:	2201      	movs	r2, #1
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
    1200:	2503      	movs	r5, #3
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    1202:	409a      	lsls	r2, r3
    1204:	4914      	ldr	r1, [pc, #80]	; (1258 <_ZN6SERCOM13initClockNVICEv+0x80>)
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
    1206:	24c0      	movs	r4, #192	; 0xc0
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    1208:	600a      	str	r2, [r1, #0]
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
    120a:	089a      	lsrs	r2, r3, #2
    120c:	402b      	ands	r3, r5
    120e:	40ab      	lsls	r3, r5
    1210:	35fc      	adds	r5, #252	; 0xfc
    1212:	409d      	lsls	r5, r3
    1214:	0092      	lsls	r2, r2, #2
    1216:	1852      	adds	r2, r2, r1
    1218:	00a4      	lsls	r4, r4, #2
    121a:	5911      	ldr	r1, [r2, r4]
    121c:	43a9      	bics	r1, r5
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
    121e:	25c0      	movs	r5, #192	; 0xc0
    1220:	409d      	lsls	r5, r3
    1222:	002b      	movs	r3, r5
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
    1224:	430b      	orrs	r3, r1
    1226:	5113      	str	r3, [r2, r4]
  NVIC_EnableIRQ(IdNvic);
  NVIC_SetPriority (IdNvic, SERCOM_NVIC_PRIORITY);  /* set Priority */

  //Setting clock
  GCLK->CLKCTRL.reg = GCLK_CLKCTRL_ID( clockId ) | // Generic Clock 0 (SERCOMx)
                      GCLK_CLKCTRL_GEN_GCLK0 | // Generic Clock Generator 0 is source
    1228:	2380      	movs	r3, #128	; 0x80
    122a:	01db      	lsls	r3, r3, #7
    122c:	4318      	orrs	r0, r3
  GCLK->CLKCTRL.reg = GCLK_CLKCTRL_ID( clockId ) | // Generic Clock 0 (SERCOMx)
    122e:	4b0b      	ldr	r3, [pc, #44]	; (125c <_ZN6SERCOM13initClockNVICEv+0x84>)
    1230:	8058      	strh	r0, [r3, #2]
                      GCLK_CLKCTRL_CLKEN ;

  while ( GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY )
    1232:	785a      	ldrb	r2, [r3, #1]
    1234:	b252      	sxtb	r2, r2
    1236:	2a00      	cmp	r2, #0
    1238:	dbfb      	blt.n	1232 <_ZN6SERCOM13initClockNVICEv+0x5a>
  {
    /* Wait for synchronization */
  }
}
    123a:	bd30      	pop	{r4, r5, pc}
    IdNvic = SERCOM1_IRQn;
    123c:	2308      	movs	r3, #8
    clockId = GCM_SERCOM1_CORE;
    123e:	2015      	movs	r0, #21
    1240:	e7dd      	b.n	11fe <_ZN6SERCOM13initClockNVICEv+0x26>
    IdNvic = SERCOM2_IRQn;
    1242:	2309      	movs	r3, #9
    clockId = GCM_SERCOM2_CORE;
    1244:	2016      	movs	r0, #22
    1246:	e7da      	b.n	11fe <_ZN6SERCOM13initClockNVICEv+0x26>
    1248:	42000800 	.word	0x42000800
    124c:	42000c00 	.word	0x42000c00
    1250:	42001000 	.word	0x42001000
    1254:	42001400 	.word	0x42001400
    1258:	e000e100 	.word	0xe000e100
    125c:	40000c00 	.word	0x40000c00

00001260 <_ZN6SERCOM8initUARTE14SercomUartMode20SercomUartSampleRatem>:
{
    1260:	b570      	push	{r4, r5, r6, lr}
    1262:	0004      	movs	r4, r0
    1264:	000e      	movs	r6, r1
    1266:	001d      	movs	r5, r3
  initClockNVIC();
    1268:	f7ff ffb6 	bl	11d8 <_ZN6SERCOM13initClockNVICEv>
  resetUART();
    126c:	0020      	movs	r0, r4
    126e:	f7ff fe98 	bl	fa2 <_ZN6SERCOM9resetUARTEv>
  sercom->USART.CTRLA.reg =	SERCOM_USART_CTRLA_MODE(mode) 
    1272:	221c      	movs	r2, #28
    1274:	6824      	ldr	r4, [r4, #0]
    1276:	00b3      	lsls	r3, r6, #2
    1278:	4013      	ands	r3, r2
    127a:	6023      	str	r3, [r4, #0]
  sercom->USART.INTENSET.reg =	SERCOM_USART_INTENSET_RXC /* Receive */
    127c:	2304      	movs	r3, #4
    127e:	7363      	strb	r3, [r4, #13]
  if ( mode == UART_INT_CLOCK )
    1280:	2e01      	cmp	r6, #1
    1282:	d108      	bne.n	1296 <_ZN6SERCOM8initUARTE14SercomUartMode20SercomUartSampleRatem+0x36>
    uint32_t baudTimes8 = (SystemCoreClock * 8) / (sampleRateValue * baudrate);
    1284:	4b04      	ldr	r3, [pc, #16]	; (1298 <_ZN6SERCOM8initUARTE14SercomUartMode20SercomUartSampleRatem+0x38>)
    1286:	00e9      	lsls	r1, r5, #3
    1288:	6818      	ldr	r0, [r3, #0]
    128a:	00c0      	lsls	r0, r0, #3
    128c:	f000 f85e 	bl	134c <__udivsi3>
    sercom->USART.BAUD.reg = (baudTimes8 / 8);
    1290:	08c0      	lsrs	r0, r0, #3
    1292:	b280      	uxth	r0, r0
    1294:	8160      	strh	r0, [r4, #10]
}
    1296:	bd70      	pop	{r4, r5, r6, pc}
    1298:	20000004 	.word	0x20000004

0000129c <_ZN6SERCOM7initSPIE14SercomSpiTXPad11SercomRXPad17SercomSpiCharSize15SercomDataOrder>:
{
    129c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    129e:	0007      	movs	r7, r0
    12a0:	9301      	str	r3, [sp, #4]
    12a2:	ab08      	add	r3, sp, #32
    12a4:	781e      	ldrb	r6, [r3, #0]
    12a6:	000d      	movs	r5, r1
    12a8:	0014      	movs	r4, r2
  resetSPI();
    12aa:	f7ff feef 	bl	108c <_ZN6SERCOM8resetSPIEv>
  initClockNVIC();
    12ae:	0038      	movs	r0, r7
    12b0:	f7ff ff92 	bl	11d8 <_ZN6SERCOM13initClockNVICEv>
                          SERCOM_SPI_CTRLA_DIPO(miso) |
    12b4:	22c0      	movs	r2, #192	; 0xc0
    12b6:	0524      	lsls	r4, r4, #20
    12b8:	0392      	lsls	r2, r2, #14
    12ba:	4014      	ands	r4, r2
                          dataOrder << SERCOM_SPI_CTRLA_DORD_Pos;
    12bc:	07b2      	lsls	r2, r6, #30
                          SERCOM_SPI_CTRLA_DIPO(miso) |
    12be:	260c      	movs	r6, #12
  sercom->SPI.CTRLB.reg = SERCOM_SPI_CTRLB_CHSIZE(charSize) |
    12c0:	2107      	movs	r1, #7
                          SERCOM_SPI_CTRLA_DIPO(miso) |
    12c2:	4316      	orrs	r6, r2
  sercom->SPI.CTRLB.reg = SERCOM_SPI_CTRLB_CHSIZE(charSize) |
    12c4:	9a01      	ldr	r2, [sp, #4]
                          SERCOM_SPI_CTRLA_DIPO(miso) |
    12c6:	4334      	orrs	r4, r6
  sercom->SPI.CTRLB.reg = SERCOM_SPI_CTRLB_CHSIZE(charSize) |
    12c8:	400a      	ands	r2, r1
                          SERCOM_SPI_CTRLA_DOPO(mosi) |
    12ca:	26c0      	movs	r6, #192	; 0xc0
  sercom->SPI.CTRLB.reg = SERCOM_SPI_CTRLB_CHSIZE(charSize) |
    12cc:	0011      	movs	r1, r2
    12ce:	2280      	movs	r2, #128	; 0x80
                          SERCOM_SPI_CTRLA_DOPO(mosi) |
    12d0:	02b6      	lsls	r6, r6, #10
    12d2:	042d      	lsls	r5, r5, #16
  sercom->SPI.CTRLA.reg =	SERCOM_SPI_CTRLA_MODE_SPI_MASTER |
    12d4:	683b      	ldr	r3, [r7, #0]
                          SERCOM_SPI_CTRLA_DOPO(mosi) |
    12d6:	4035      	ands	r5, r6
  sercom->SPI.CTRLB.reg = SERCOM_SPI_CTRLB_CHSIZE(charSize) |
    12d8:	0292      	lsls	r2, r2, #10
                          SERCOM_SPI_CTRLA_DIPO(miso) |
    12da:	4325      	orrs	r5, r4
  sercom->SPI.CTRLB.reg = SERCOM_SPI_CTRLB_CHSIZE(charSize) |
    12dc:	430a      	orrs	r2, r1
  sercom->SPI.CTRLA.reg =	SERCOM_SPI_CTRLA_MODE_SPI_MASTER |
    12de:	601d      	str	r5, [r3, #0]
  sercom->SPI.CTRLB.reg = SERCOM_SPI_CTRLB_CHSIZE(charSize) |
    12e0:	605a      	str	r2, [r3, #4]
}
    12e2:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}

000012e4 <_ZN6SERCOM14initMasterWIREEm>:
{
    12e4:	b570      	push	{r4, r5, r6, lr}
    12e6:	0005      	movs	r5, r0
    12e8:	000c      	movs	r4, r1
  initClockNVIC() ;
    12ea:	f7ff ff75 	bl	11d8 <_ZN6SERCOM13initClockNVICEv>
  resetWIRE() ;
    12ee:	0028      	movs	r0, r5
    12f0:	f7ff feea 	bl	10c8 <_ZN6SERCOM9resetWIREEv>
  sercom->I2CM.CTRLA.reg =  SERCOM_I2CM_CTRLA_MODE( I2C_MASTER_OPERATION )/* |
    12f4:	2314      	movs	r3, #20
    12f6:	682d      	ldr	r5, [r5, #0]
  sercom->I2CM.BAUD.bit.BAUD = SystemCoreClock / ( 2 * baudrate) - 5 - (((SystemCoreClock / 1000000) * WIRE_RISE_TIME_NANOSECONDS) / (2 * 1000));
    12f8:	0061      	lsls	r1, r4, #1
  sercom->I2CM.CTRLA.reg =  SERCOM_I2CM_CTRLA_MODE( I2C_MASTER_OPERATION )/* |
    12fa:	602b      	str	r3, [r5, #0]
  sercom->I2CM.BAUD.bit.BAUD = SystemCoreClock / ( 2 * baudrate) - 5 - (((SystemCoreClock / 1000000) * WIRE_RISE_TIME_NANOSECONDS) / (2 * 1000));
    12fc:	4b0c      	ldr	r3, [pc, #48]	; (1330 <_ZN6SERCOM14initMasterWIREEm+0x4c>)
    12fe:	681e      	ldr	r6, [r3, #0]
    1300:	0030      	movs	r0, r6
    1302:	f000 f823 	bl	134c <__udivsi3>
    1306:	490b      	ldr	r1, [pc, #44]	; (1334 <_ZN6SERCOM14initMasterWIREEm+0x50>)
    1308:	0004      	movs	r4, r0
    130a:	0030      	movs	r0, r6
    130c:	f000 f81e 	bl	134c <__udivsi3>
    1310:	237d      	movs	r3, #125	; 0x7d
    1312:	21fa      	movs	r1, #250	; 0xfa
    1314:	4358      	muls	r0, r3
    1316:	00c9      	lsls	r1, r1, #3
    1318:	f000 f818 	bl	134c <__udivsi3>
    131c:	23ff      	movs	r3, #255	; 0xff
    131e:	1a24      	subs	r4, r4, r0
    1320:	8968      	ldrh	r0, [r5, #10]
    1322:	3c05      	subs	r4, #5
    1324:	401c      	ands	r4, r3
    1326:	4398      	bics	r0, r3
    1328:	4304      	orrs	r4, r0
    132a:	816c      	strh	r4, [r5, #10]
}
    132c:	bd70      	pop	{r4, r5, r6, pc}
    132e:	46c0      	nop			; (mov r8, r8)
    1330:	20000004 	.word	0x20000004
    1334:	000f4240 	.word	0x000f4240

00001338 <__gnu_thumb1_case_uqi>:
    1338:	b402      	push	{r1}
    133a:	4671      	mov	r1, lr
    133c:	0849      	lsrs	r1, r1, #1
    133e:	0049      	lsls	r1, r1, #1
    1340:	5c09      	ldrb	r1, [r1, r0]
    1342:	0049      	lsls	r1, r1, #1
    1344:	448e      	add	lr, r1
    1346:	bc02      	pop	{r1}
    1348:	4770      	bx	lr
    134a:	46c0      	nop			; (mov r8, r8)

0000134c <__udivsi3>:
    134c:	2200      	movs	r2, #0
    134e:	0843      	lsrs	r3, r0, #1
    1350:	428b      	cmp	r3, r1
    1352:	d374      	bcc.n	143e <__udivsi3+0xf2>
    1354:	0903      	lsrs	r3, r0, #4
    1356:	428b      	cmp	r3, r1
    1358:	d35f      	bcc.n	141a <__udivsi3+0xce>
    135a:	0a03      	lsrs	r3, r0, #8
    135c:	428b      	cmp	r3, r1
    135e:	d344      	bcc.n	13ea <__udivsi3+0x9e>
    1360:	0b03      	lsrs	r3, r0, #12
    1362:	428b      	cmp	r3, r1
    1364:	d328      	bcc.n	13b8 <__udivsi3+0x6c>
    1366:	0c03      	lsrs	r3, r0, #16
    1368:	428b      	cmp	r3, r1
    136a:	d30d      	bcc.n	1388 <__udivsi3+0x3c>
    136c:	22ff      	movs	r2, #255	; 0xff
    136e:	0209      	lsls	r1, r1, #8
    1370:	ba12      	rev	r2, r2
    1372:	0c03      	lsrs	r3, r0, #16
    1374:	428b      	cmp	r3, r1
    1376:	d302      	bcc.n	137e <__udivsi3+0x32>
    1378:	1212      	asrs	r2, r2, #8
    137a:	0209      	lsls	r1, r1, #8
    137c:	d065      	beq.n	144a <__udivsi3+0xfe>
    137e:	0b03      	lsrs	r3, r0, #12
    1380:	428b      	cmp	r3, r1
    1382:	d319      	bcc.n	13b8 <__udivsi3+0x6c>
    1384:	e000      	b.n	1388 <__udivsi3+0x3c>
    1386:	0a09      	lsrs	r1, r1, #8
    1388:	0bc3      	lsrs	r3, r0, #15
    138a:	428b      	cmp	r3, r1
    138c:	d301      	bcc.n	1392 <__udivsi3+0x46>
    138e:	03cb      	lsls	r3, r1, #15
    1390:	1ac0      	subs	r0, r0, r3
    1392:	4152      	adcs	r2, r2
    1394:	0b83      	lsrs	r3, r0, #14
    1396:	428b      	cmp	r3, r1
    1398:	d301      	bcc.n	139e <__udivsi3+0x52>
    139a:	038b      	lsls	r3, r1, #14
    139c:	1ac0      	subs	r0, r0, r3
    139e:	4152      	adcs	r2, r2
    13a0:	0b43      	lsrs	r3, r0, #13
    13a2:	428b      	cmp	r3, r1
    13a4:	d301      	bcc.n	13aa <__udivsi3+0x5e>
    13a6:	034b      	lsls	r3, r1, #13
    13a8:	1ac0      	subs	r0, r0, r3
    13aa:	4152      	adcs	r2, r2
    13ac:	0b03      	lsrs	r3, r0, #12
    13ae:	428b      	cmp	r3, r1
    13b0:	d301      	bcc.n	13b6 <__udivsi3+0x6a>
    13b2:	030b      	lsls	r3, r1, #12
    13b4:	1ac0      	subs	r0, r0, r3
    13b6:	4152      	adcs	r2, r2
    13b8:	0ac3      	lsrs	r3, r0, #11
    13ba:	428b      	cmp	r3, r1
    13bc:	d301      	bcc.n	13c2 <__udivsi3+0x76>
    13be:	02cb      	lsls	r3, r1, #11
    13c0:	1ac0      	subs	r0, r0, r3
    13c2:	4152      	adcs	r2, r2
    13c4:	0a83      	lsrs	r3, r0, #10
    13c6:	428b      	cmp	r3, r1
    13c8:	d301      	bcc.n	13ce <__udivsi3+0x82>
    13ca:	028b      	lsls	r3, r1, #10
    13cc:	1ac0      	subs	r0, r0, r3
    13ce:	4152      	adcs	r2, r2
    13d0:	0a43      	lsrs	r3, r0, #9
    13d2:	428b      	cmp	r3, r1
    13d4:	d301      	bcc.n	13da <__udivsi3+0x8e>
    13d6:	024b      	lsls	r3, r1, #9
    13d8:	1ac0      	subs	r0, r0, r3
    13da:	4152      	adcs	r2, r2
    13dc:	0a03      	lsrs	r3, r0, #8
    13de:	428b      	cmp	r3, r1
    13e0:	d301      	bcc.n	13e6 <__udivsi3+0x9a>
    13e2:	020b      	lsls	r3, r1, #8
    13e4:	1ac0      	subs	r0, r0, r3
    13e6:	4152      	adcs	r2, r2
    13e8:	d2cd      	bcs.n	1386 <__udivsi3+0x3a>
    13ea:	09c3      	lsrs	r3, r0, #7
    13ec:	428b      	cmp	r3, r1
    13ee:	d301      	bcc.n	13f4 <__udivsi3+0xa8>
    13f0:	01cb      	lsls	r3, r1, #7
    13f2:	1ac0      	subs	r0, r0, r3
    13f4:	4152      	adcs	r2, r2
    13f6:	0983      	lsrs	r3, r0, #6
    13f8:	428b      	cmp	r3, r1
    13fa:	d301      	bcc.n	1400 <__udivsi3+0xb4>
    13fc:	018b      	lsls	r3, r1, #6
    13fe:	1ac0      	subs	r0, r0, r3
    1400:	4152      	adcs	r2, r2
    1402:	0943      	lsrs	r3, r0, #5
    1404:	428b      	cmp	r3, r1
    1406:	d301      	bcc.n	140c <__udivsi3+0xc0>
    1408:	014b      	lsls	r3, r1, #5
    140a:	1ac0      	subs	r0, r0, r3
    140c:	4152      	adcs	r2, r2
    140e:	0903      	lsrs	r3, r0, #4
    1410:	428b      	cmp	r3, r1
    1412:	d301      	bcc.n	1418 <__udivsi3+0xcc>
    1414:	010b      	lsls	r3, r1, #4
    1416:	1ac0      	subs	r0, r0, r3
    1418:	4152      	adcs	r2, r2
    141a:	08c3      	lsrs	r3, r0, #3
    141c:	428b      	cmp	r3, r1
    141e:	d301      	bcc.n	1424 <__udivsi3+0xd8>
    1420:	00cb      	lsls	r3, r1, #3
    1422:	1ac0      	subs	r0, r0, r3
    1424:	4152      	adcs	r2, r2
    1426:	0883      	lsrs	r3, r0, #2
    1428:	428b      	cmp	r3, r1
    142a:	d301      	bcc.n	1430 <__udivsi3+0xe4>
    142c:	008b      	lsls	r3, r1, #2
    142e:	1ac0      	subs	r0, r0, r3
    1430:	4152      	adcs	r2, r2
    1432:	0843      	lsrs	r3, r0, #1
    1434:	428b      	cmp	r3, r1
    1436:	d301      	bcc.n	143c <__udivsi3+0xf0>
    1438:	004b      	lsls	r3, r1, #1
    143a:	1ac0      	subs	r0, r0, r3
    143c:	4152      	adcs	r2, r2
    143e:	1a41      	subs	r1, r0, r1
    1440:	d200      	bcs.n	1444 <__udivsi3+0xf8>
    1442:	4601      	mov	r1, r0
    1444:	4152      	adcs	r2, r2
    1446:	4610      	mov	r0, r2
    1448:	4770      	bx	lr
    144a:	e7ff      	b.n	144c <__udivsi3+0x100>
    144c:	b501      	push	{r0, lr}
    144e:	2000      	movs	r0, #0
    1450:	f000 f806 	bl	1460 <__aeabi_idiv0>
    1454:	bd02      	pop	{r1, pc}
    1456:	46c0      	nop			; (mov r8, r8)

00001458 <__aeabi_uidivmod>:
    1458:	2900      	cmp	r1, #0
    145a:	d0f7      	beq.n	144c <__udivsi3+0x100>
    145c:	e776      	b.n	134c <__udivsi3>
    145e:	4770      	bx	lr

00001460 <__aeabi_idiv0>:
    1460:	4770      	bx	lr
    1462:	46c0      	nop			; (mov r8, r8)

00001464 <__libc_init_array>:
    1464:	b570      	push	{r4, r5, r6, lr}
    1466:	2600      	movs	r6, #0
    1468:	4d0c      	ldr	r5, [pc, #48]	; (149c <__libc_init_array+0x38>)
    146a:	4c0d      	ldr	r4, [pc, #52]	; (14a0 <__libc_init_array+0x3c>)
    146c:	1b64      	subs	r4, r4, r5
    146e:	10a4      	asrs	r4, r4, #2
    1470:	42a6      	cmp	r6, r4
    1472:	d109      	bne.n	1488 <__libc_init_array+0x24>
    1474:	2600      	movs	r6, #0
    1476:	f000 f829 	bl	14cc <_init>
    147a:	4d0a      	ldr	r5, [pc, #40]	; (14a4 <__libc_init_array+0x40>)
    147c:	4c0a      	ldr	r4, [pc, #40]	; (14a8 <__libc_init_array+0x44>)
    147e:	1b64      	subs	r4, r4, r5
    1480:	10a4      	asrs	r4, r4, #2
    1482:	42a6      	cmp	r6, r4
    1484:	d105      	bne.n	1492 <__libc_init_array+0x2e>
    1486:	bd70      	pop	{r4, r5, r6, pc}
    1488:	00b3      	lsls	r3, r6, #2
    148a:	58eb      	ldr	r3, [r5, r3]
    148c:	4798      	blx	r3
    148e:	3601      	adds	r6, #1
    1490:	e7ee      	b.n	1470 <__libc_init_array+0xc>
    1492:	00b3      	lsls	r3, r6, #2
    1494:	58eb      	ldr	r3, [r5, r3]
    1496:	4798      	blx	r3
    1498:	3601      	adds	r6, #1
    149a:	e7f2      	b.n	1482 <__libc_init_array+0x1e>
    149c:	20000008 	.word	0x20000008
    14a0:	20000008 	.word	0x20000008
    14a4:	20000008 	.word	0x20000008
    14a8:	20000018 	.word	0x20000018

000014ac <memset>:
    14ac:	0003      	movs	r3, r0
    14ae:	1882      	adds	r2, r0, r2
    14b0:	4293      	cmp	r3, r2
    14b2:	d100      	bne.n	14b6 <memset+0xa>
    14b4:	4770      	bx	lr
    14b6:	7019      	strb	r1, [r3, #0]
    14b8:	3301      	adds	r3, #1
    14ba:	e7f9      	b.n	14b0 <memset+0x4>

000014bc <strlen>:
    14bc:	2300      	movs	r3, #0
    14be:	5cc2      	ldrb	r2, [r0, r3]
    14c0:	3301      	adds	r3, #1
    14c2:	2a00      	cmp	r2, #0
    14c4:	d1fb      	bne.n	14be <strlen+0x2>
    14c6:	1e58      	subs	r0, r3, #1
    14c8:	4770      	bx	lr
	...

000014cc <_init>:
    14cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    14ce:	46c0      	nop			; (mov r8, r8)
    14d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
    14d2:	bc08      	pop	{r3}
    14d4:	469e      	mov	lr, r3
    14d6:	4770      	bx	lr

000014d8 <_fini>:
    14d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    14da:	46c0      	nop			; (mov r8, r8)
    14dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
    14de:	bc08      	pop	{r3}
    14e0:	469e      	mov	lr, r3
    14e2:	4770      	bx	lr

000014e4 <_ZTV4Uart>:
	...
    14ec:	07c1 0000 023d 0000 0703 0000 06c5 0000     ....=...........
    14fc:	06dd 0000 0875 0000 04d9 0000 04c9 0000     ....u...........
    150c:	0555 0000 04ef 0000 04c5 0000               U...........

00001518 <_ZTV7TwoWire>:
	...
    1520:	0d47 0000 0c39 0000 0239 0000 0c5d 0000     G...9...9...]...
    1530:	0c79 0000 0d91 0000 0c5f 0000               y......._...

0000153c <g_APinDescription>:
    153c:	0000 0000 0019 0000 0002 0000 0004 0000     ................
    154c:	00ff ffff ffff 000d 0000 0000 0018 0000     ................
    155c:	0002 0000 0004 0000 00ff ffff ffff 000c     ................
    156c:	0000 0000 000b 0000 0004 0000 001c 0000     ................
    157c:	00ff 0101 0101 000b 0000 0000 000e 0000     ................
    158c:	0004 0000 001c 0000 00ff 0300 0300 000e     ................
    159c:	0000 0000 000f 0000 0004 0000 001c 0000     ................
    15ac:	00ff 0301 0301 000f 0000 0000 0010 0000     ................
    15bc:	0004 0000 001c 0000 00ff 0200 0200 0000     ................
    15cc:	0000 0000 0011 0000 0004 0000 001c 0000     ................
    15dc:	00ff 0201 0201 0001 0000 0000 0012 0000     ................
    15ec:	0008 0000 0004 0000 00ff ffff ffff 0002     ................
    15fc:	0000 0000 0013 0000 0008 0000 0004 0000     ................
    160c:	00ff ffff ffff 0003 0000 0000 0016 0000     ................
    161c:	0004 0000 001c 0000 00ff 0400 0400 0006     ................
    162c:	0000 0000 0017 0000 0004 0000 001c 0000     ................
    163c:	00ff 0401 0401 0007 0000 0000 001b 0000     ................
    164c:	0008 0000 0004 0000 00ff ffff ffff 000f     ................
    165c:	0000 0000 001c 0000 0008 0000 0004 0000     ................
    166c:	00ff ffff ffff 0008 0000 0000 0002 0000     ................
    167c:	0001 0000 0006 0000 0000 ffff ffff 0002     ................
    168c:	0000 0000 0004 0000 0001 0000 001e 0000     ................
    169c:	0004 0000 0000 0004 0000 0000 0005 0000     ................
    16ac:	0001 0000 001e 0000 0005 0001 0001 0005     ................
    16bc:	0000 0000 0006 0000 0001 0000 001e 0000     ................
    16cc:	0006 0100 0100 0006 0000 0000 0007 0000     ................
    16dc:	0001 0000 001e 0000 0007 0101 0101 0007     ................
    16ec:	0000 0000 000a 0000 0001 0000 0006 0000     ................
    16fc:	0012 ffff ffff 000a 0000 0000 0008 0000     ................
    170c:	0002 0000 0004 0000 00ff ffff ffff 0010     ................
    171c:	0000 0000 0009 0000 0002 0000 0004 0000     ................
    172c:	00ff ffff ffff 0009 0000 0000 0013 0000     ................
    173c:	0002 0000 0004 0000 00ff ffff ffff 0003     ................
    174c:	0000 0000 0010 0000 0002 0000 0004 0000     ................
    175c:	00ff ffff ffff 0000 0000 0000 0011 0000     ................
    176c:	0002 0000 0004 0000 00ff ffff ffff 0001     ................
    177c:	0000 0000 0003 0000 0001 0000 0002 0000     ................
    178c:	00ff ffff ffff 00ff 0000 0000 0002 0000     ................
    179c:	0001 0000 0002 0000 0014 ffff ffff 0002     ................

000017ac <__EH_FRAME_BEGIN__>:
    17ac:	0000 0000                                   ....
